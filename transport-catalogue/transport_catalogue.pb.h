// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
namespace transport_catalogue_serialize {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Buses;
struct BusesDefaultTypeInternal;
extern BusesDefaultTypeInternal _Buses_default_instance_;
class Collortxt;
struct CollortxtDefaultTypeInternal;
extern CollortxtDefaultTypeInternal _Collortxt_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Rendersettings;
struct RendersettingsDefaultTypeInternal;
extern RendersettingsDefaultTypeInternal _Rendersettings_default_instance_;
class Rgb;
struct RgbDefaultTypeInternal;
extern RgbDefaultTypeInternal _Rgb_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
class Road;
struct RoadDefaultTypeInternal;
extern RoadDefaultTypeInternal _Road_default_instance_;
class Routesettings;
struct RoutesettingsDefaultTypeInternal;
extern RoutesettingsDefaultTypeInternal _Routesettings_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class Stops;
struct StopsDefaultTypeInternal;
extern StopsDefaultTypeInternal _Stops_default_instance_;
class Table;
struct TableDefaultTypeInternal;
extern TableDefaultTypeInternal _Table_default_instance_;
class Table_TableStopsEntry_DoNotUse;
struct Table_TableStopsEntry_DoNotUseDefaultTypeInternal;
extern Table_TableStopsEntry_DoNotUseDefaultTypeInternal _Table_TableStopsEntry_DoNotUse_default_instance_;
class Tableinvert;
struct TableinvertDefaultTypeInternal;
extern TableinvertDefaultTypeInternal _Tableinvert_default_instance_;
class Tableinvert_TableInvertStopsEntry_DoNotUse;
struct Tableinvert_TableInvertStopsEntry_DoNotUseDefaultTypeInternal;
extern Tableinvert_TableInvertStopsEntry_DoNotUseDefaultTypeInternal _Tableinvert_TableInvertStopsEntry_DoNotUse_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_serialize::Bus* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Bus>(Arena*);
template<> ::transport_catalogue_serialize::Buses* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Buses>(Arena*);
template<> ::transport_catalogue_serialize::Collortxt* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Collortxt>(Arena*);
template<> ::transport_catalogue_serialize::Color* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Color>(Arena*);
template<> ::transport_catalogue_serialize::Rendersettings* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Rendersettings>(Arena*);
template<> ::transport_catalogue_serialize::Rgb* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Rgb>(Arena*);
template<> ::transport_catalogue_serialize::Rgba* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Rgba>(Arena*);
template<> ::transport_catalogue_serialize::Road* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Road>(Arena*);
template<> ::transport_catalogue_serialize::Routesettings* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Routesettings>(Arena*);
template<> ::transport_catalogue_serialize::Stop* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Stop>(Arena*);
template<> ::transport_catalogue_serialize::Stops* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Stops>(Arena*);
template<> ::transport_catalogue_serialize::Table* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Table>(Arena*);
template<> ::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse>(Arena*);
template<> ::transport_catalogue_serialize::Tableinvert* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Tableinvert>(Arena*);
template<> ::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse>(Arena*);
template<> ::transport_catalogue_serialize::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_serialize::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_serialize {

// ===================================================================

class Table_TableStopsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Table_TableStopsEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Table_TableStopsEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  Table_TableStopsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Table_TableStopsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Table_TableStopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Table_TableStopsEntry_DoNotUse& other);
  static const Table_TableStopsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Table_TableStopsEntry_DoNotUse*>(&_Table_TableStopsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "transport_catalogue_serialize.Table.TableStopsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};

// -------------------------------------------------------------------

class Table final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Table) */ {
 public:
  inline Table() : Table(nullptr) {}
  ~Table() override;
  explicit PROTOBUF_CONSTEXPR Table(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Table(const Table& from);
  Table(Table&& from) noexcept
    : Table() {
    *this = ::std::move(from);
  }

  inline Table& operator=(const Table& from) {
    CopyFrom(from);
    return *this;
  }
  inline Table& operator=(Table&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Table& default_instance() {
    return *internal_default_instance();
  }
  static inline const Table* internal_default_instance() {
    return reinterpret_cast<const Table*>(
               &_Table_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Table& a, Table& b) {
    a.Swap(&b);
  }
  inline void Swap(Table* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Table* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Table* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Table>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Table& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Table& from) {
    Table::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Table* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Table";
  }
  protected:
  explicit Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableStopsFieldNumber = 1,
  };
  // map<string, uint32> table_stops = 1;
  int table_stops_size() const;
  private:
  int _internal_table_stops_size() const;
  public:
  void clear_table_stops();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_table_stops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_table_stops();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      table_stops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_table_stops();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Table)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Table_TableStopsEntry_DoNotUse,
        std::string, uint32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> table_stops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Tableinvert_TableInvertStopsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Tableinvert_TableInvertStopsEntry_DoNotUse, 
    uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Tableinvert_TableInvertStopsEntry_DoNotUse, 
    uint32_t, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Tableinvert_TableInvertStopsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR Tableinvert_TableInvertStopsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Tableinvert_TableInvertStopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Tableinvert_TableInvertStopsEntry_DoNotUse& other);
  static const Tableinvert_TableInvertStopsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Tableinvert_TableInvertStopsEntry_DoNotUse*>(&_Tableinvert_TableInvertStopsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "transport_catalogue_serialize.Tableinvert.TableInvertStopsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};

// -------------------------------------------------------------------

class Tableinvert final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Tableinvert) */ {
 public:
  inline Tableinvert() : Tableinvert(nullptr) {}
  ~Tableinvert() override;
  explicit PROTOBUF_CONSTEXPR Tableinvert(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tableinvert(const Tableinvert& from);
  Tableinvert(Tableinvert&& from) noexcept
    : Tableinvert() {
    *this = ::std::move(from);
  }

  inline Tableinvert& operator=(const Tableinvert& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tableinvert& operator=(Tableinvert&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Tableinvert& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tableinvert* internal_default_instance() {
    return reinterpret_cast<const Tableinvert*>(
               &_Tableinvert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Tableinvert& a, Tableinvert& b) {
    a.Swap(&b);
  }
  inline void Swap(Tableinvert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tableinvert* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tableinvert* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tableinvert>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Tableinvert& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Tableinvert& from) {
    Tableinvert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Tableinvert* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Tableinvert";
  }
  protected:
  explicit Tableinvert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTableInvertStopsFieldNumber = 1,
  };
  // map<uint32, string> table_invert_stops = 1;
  int table_invert_stops_size() const;
  private:
  int _internal_table_invert_stops_size() const;
  public:
  void clear_table_invert_stops();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
      _internal_table_invert_stops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
      _internal_mutable_table_invert_stops();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
      table_invert_stops() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
      mutable_table_invert_stops();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Tableinvert)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        Tableinvert_TableInvertStopsEntry_DoNotUse,
        uint32_t, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> table_invert_stops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Road final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Road) */ {
 public:
  inline Road() : Road(nullptr) {}
  ~Road() override;
  explicit PROTOBUF_CONSTEXPR Road(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Road(const Road& from);
  Road(Road&& from) noexcept
    : Road() {
    *this = ::std::move(from);
  }

  inline Road& operator=(const Road& from) {
    CopyFrom(from);
    return *this;
  }
  inline Road& operator=(Road&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Road& default_instance() {
    return *internal_default_instance();
  }
  static inline const Road* internal_default_instance() {
    return reinterpret_cast<const Road*>(
               &_Road_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Road& a, Road& b) {
    a.Swap(&b);
  }
  inline void Swap(Road* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Road* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Road* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Road>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Road& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Road& from) {
    Road::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Road* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Road";
  }
  protected:
  explicit Road(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // uint32 to = 1;
  void clear_to();
  uint32_t to() const;
  void set_to(uint32_t value);
  private:
  uint32_t _internal_to() const;
  void _internal_set_to(uint32_t value);
  public:

  // uint32 distance = 2;
  void clear_distance();
  uint32_t distance() const;
  void set_distance(uint32_t value);
  private:
  uint32_t _internal_distance() const;
  void _internal_set_distance(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Road)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t to_;
    uint32_t distance_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  ~Stop() override;
  explicit PROTOBUF_CONSTEXPR Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stop& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stop& from) {
    Stop::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoadDistancesFieldNumber = 4,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated .transport_catalogue_serialize.Road road_distances = 4;
  int road_distances_size() const;
  private:
  int _internal_road_distances_size() const;
  public:
  void clear_road_distances();
  ::transport_catalogue_serialize::Road* mutable_road_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Road >*
      mutable_road_distances();
  private:
  const ::transport_catalogue_serialize::Road& _internal_road_distances(int index) const;
  ::transport_catalogue_serialize::Road* _internal_add_road_distances();
  public:
  const ::transport_catalogue_serialize::Road& road_distances(int index) const;
  ::transport_catalogue_serialize::Road* add_road_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Road >&
      road_distances() const;

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // uint32 name = 1;
  void clear_name();
  uint32_t name() const;
  void set_name(uint32_t value);
  private:
  uint32_t _internal_name() const;
  void _internal_set_name(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Road > road_distances_;
    double latitude_;
    double longitude_;
    uint32_t name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  ~Bus() override;
  explicit PROTOBUF_CONSTEXPR Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Bus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Bus& from) {
    Bus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 3,
    kNameFieldNumber = 1,
    kIsRoundtripFieldNumber = 2,
  };
  // repeated .transport_catalogue_serialize.Stop stops = 3;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_serialize::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_serialize::Stop& _internal_stops(int index) const;
  ::transport_catalogue_serialize::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_serialize::Stop& stops(int index) const;
  ::transport_catalogue_serialize::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
      stops() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bool is_roundtrip = 2;
  void clear_is_roundtrip();
  bool is_roundtrip() const;
  void set_is_roundtrip(bool value);
  private:
  bool _internal_is_roundtrip() const;
  void _internal_set_is_roundtrip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop > stops_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool is_roundtrip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stops final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Stops) */ {
 public:
  inline Stops() : Stops(nullptr) {}
  ~Stops() override;
  explicit PROTOBUF_CONSTEXPR Stops(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stops(const Stops& from);
  Stops(Stops&& from) noexcept
    : Stops() {
    *this = ::std::move(from);
  }

  inline Stops& operator=(const Stops& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stops& operator=(Stops&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Stops& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stops* internal_default_instance() {
    return reinterpret_cast<const Stops*>(
               &_Stops_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Stops& a, Stops& b) {
    a.Swap(&b);
  }
  inline void Swap(Stops* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stops* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Stops* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Stops>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Stops& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Stops& from) {
    Stops::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stops* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Stops";
  }
  protected:
  explicit Stops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
  };
  // repeated .transport_catalogue_serialize.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_serialize::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_serialize::Stop& _internal_stops(int index) const;
  ::transport_catalogue_serialize::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_serialize::Stop& stops(int index) const;
  ::transport_catalogue_serialize::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
      stops() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Stops)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop > stops_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Buses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Buses) */ {
 public:
  inline Buses() : Buses(nullptr) {}
  ~Buses() override;
  explicit PROTOBUF_CONSTEXPR Buses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Buses(const Buses& from);
  Buses(Buses&& from) noexcept
    : Buses() {
    *this = ::std::move(from);
  }

  inline Buses& operator=(const Buses& from) {
    CopyFrom(from);
    return *this;
  }
  inline Buses& operator=(Buses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Buses& default_instance() {
    return *internal_default_instance();
  }
  static inline const Buses* internal_default_instance() {
    return reinterpret_cast<const Buses*>(
               &_Buses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Buses& a, Buses& b) {
    a.Swap(&b);
  }
  inline void Swap(Buses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Buses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Buses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Buses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Buses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Buses& from) {
    Buses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Buses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Buses";
  }
  protected:
  explicit Buses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusesFieldNumber = 1,
  };
  // repeated .transport_catalogue_serialize.Bus buses = 1;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_catalogue_serialize::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >*
      mutable_buses();
  private:
  const ::transport_catalogue_serialize::Bus& _internal_buses(int index) const;
  ::transport_catalogue_serialize::Bus* _internal_add_buses();
  public:
  const ::transport_catalogue_serialize::Bus& buses(int index) const;
  ::transport_catalogue_serialize::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >&
      buses() const;

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Buses)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus > buses_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  ~TransportCatalogue() override;
  explicit PROTOBUF_CONSTEXPR TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransportCatalogue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransportCatalogue& from) {
    TransportCatalogue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableFieldNumber = 1,
    kStopsFieldNumber = 2,
    kBusesFieldNumber = 3,
    kRsFieldNumber = 4,
    kRendsFieldNumber = 5,
  };
  // .transport_catalogue_serialize.Table table = 1;
  bool has_table() const;
  private:
  bool _internal_has_table() const;
  public:
  void clear_table();
  const ::transport_catalogue_serialize::Table& table() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Table* release_table();
  ::transport_catalogue_serialize::Table* mutable_table();
  void set_allocated_table(::transport_catalogue_serialize::Table* table);
  private:
  const ::transport_catalogue_serialize::Table& _internal_table() const;
  ::transport_catalogue_serialize::Table* _internal_mutable_table();
  public:
  void unsafe_arena_set_allocated_table(
      ::transport_catalogue_serialize::Table* table);
  ::transport_catalogue_serialize::Table* unsafe_arena_release_table();

  // .transport_catalogue_serialize.Stops stops = 2;
  bool has_stops() const;
  private:
  bool _internal_has_stops() const;
  public:
  void clear_stops();
  const ::transport_catalogue_serialize::Stops& stops() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Stops* release_stops();
  ::transport_catalogue_serialize::Stops* mutable_stops();
  void set_allocated_stops(::transport_catalogue_serialize::Stops* stops);
  private:
  const ::transport_catalogue_serialize::Stops& _internal_stops() const;
  ::transport_catalogue_serialize::Stops* _internal_mutable_stops();
  public:
  void unsafe_arena_set_allocated_stops(
      ::transport_catalogue_serialize::Stops* stops);
  ::transport_catalogue_serialize::Stops* unsafe_arena_release_stops();

  // .transport_catalogue_serialize.Buses buses = 3;
  bool has_buses() const;
  private:
  bool _internal_has_buses() const;
  public:
  void clear_buses();
  const ::transport_catalogue_serialize::Buses& buses() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Buses* release_buses();
  ::transport_catalogue_serialize::Buses* mutable_buses();
  void set_allocated_buses(::transport_catalogue_serialize::Buses* buses);
  private:
  const ::transport_catalogue_serialize::Buses& _internal_buses() const;
  ::transport_catalogue_serialize::Buses* _internal_mutable_buses();
  public:
  void unsafe_arena_set_allocated_buses(
      ::transport_catalogue_serialize::Buses* buses);
  ::transport_catalogue_serialize::Buses* unsafe_arena_release_buses();

  // .transport_catalogue_serialize.Routesettings rs = 4;
  bool has_rs() const;
  private:
  bool _internal_has_rs() const;
  public:
  void clear_rs();
  const ::transport_catalogue_serialize::Routesettings& rs() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Routesettings* release_rs();
  ::transport_catalogue_serialize::Routesettings* mutable_rs();
  void set_allocated_rs(::transport_catalogue_serialize::Routesettings* rs);
  private:
  const ::transport_catalogue_serialize::Routesettings& _internal_rs() const;
  ::transport_catalogue_serialize::Routesettings* _internal_mutable_rs();
  public:
  void unsafe_arena_set_allocated_rs(
      ::transport_catalogue_serialize::Routesettings* rs);
  ::transport_catalogue_serialize::Routesettings* unsafe_arena_release_rs();

  // .transport_catalogue_serialize.Rendersettings rends = 5;
  bool has_rends() const;
  private:
  bool _internal_has_rends() const;
  public:
  void clear_rends();
  const ::transport_catalogue_serialize::Rendersettings& rends() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Rendersettings* release_rends();
  ::transport_catalogue_serialize::Rendersettings* mutable_rends();
  void set_allocated_rends(::transport_catalogue_serialize::Rendersettings* rends);
  private:
  const ::transport_catalogue_serialize::Rendersettings& _internal_rends() const;
  ::transport_catalogue_serialize::Rendersettings* _internal_mutable_rends();
  public:
  void unsafe_arena_set_allocated_rends(
      ::transport_catalogue_serialize::Rendersettings* rends);
  ::transport_catalogue_serialize::Rendersettings* unsafe_arena_release_rends();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::transport_catalogue_serialize::Table* table_;
    ::transport_catalogue_serialize::Stops* stops_;
    ::transport_catalogue_serialize::Buses* buses_;
    ::transport_catalogue_serialize::Routesettings* rs_;
    ::transport_catalogue_serialize::Rendersettings* rends_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Routesettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Routesettings) */ {
 public:
  inline Routesettings() : Routesettings(nullptr) {}
  ~Routesettings() override;
  explicit PROTOBUF_CONSTEXPR Routesettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Routesettings(const Routesettings& from);
  Routesettings(Routesettings&& from) noexcept
    : Routesettings() {
    *this = ::std::move(from);
  }

  inline Routesettings& operator=(const Routesettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Routesettings& operator=(Routesettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Routesettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Routesettings* internal_default_instance() {
    return reinterpret_cast<const Routesettings*>(
               &_Routesettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Routesettings& a, Routesettings& b) {
    a.Swap(&b);
  }
  inline void Swap(Routesettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Routesettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Routesettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Routesettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Routesettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Routesettings& from) {
    Routesettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Routesettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Routesettings";
  }
  protected:
  explicit Routesettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusVelocityFieldNumber = 1,
    kBusWaitTimeFieldNumber = 2,
  };
  // double bus_velocity = 1;
  void clear_bus_velocity();
  double bus_velocity() const;
  void set_bus_velocity(double value);
  private:
  double _internal_bus_velocity() const;
  void _internal_set_bus_velocity(double value);
  public:

  // double bus_wait_time = 2;
  void clear_bus_wait_time();
  double bus_wait_time() const;
  void set_bus_wait_time(double value);
  private:
  double _internal_bus_wait_time() const;
  void _internal_set_bus_wait_time(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Routesettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double bus_velocity_;
    double bus_wait_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Collortxt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Collortxt) */ {
 public:
  inline Collortxt() : Collortxt(nullptr) {}
  ~Collortxt() override;
  explicit PROTOBUF_CONSTEXPR Collortxt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Collortxt(const Collortxt& from);
  Collortxt(Collortxt&& from) noexcept
    : Collortxt() {
    *this = ::std::move(from);
  }

  inline Collortxt& operator=(const Collortxt& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collortxt& operator=(Collortxt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Collortxt& default_instance() {
    return *internal_default_instance();
  }
  static inline const Collortxt* internal_default_instance() {
    return reinterpret_cast<const Collortxt*>(
               &_Collortxt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Collortxt& a, Collortxt& b) {
    a.Swap(&b);
  }
  inline void Swap(Collortxt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Collortxt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Collortxt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Collortxt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Collortxt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Collortxt& from) {
    Collortxt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collortxt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Collortxt";
  }
  protected:
  explicit Collortxt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorFieldNumber = 1,
  };
  // string color = 1;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Collortxt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgb final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Rgb) */ {
 public:
  inline Rgb() : Rgb(nullptr) {}
  ~Rgb() override;
  explicit PROTOBUF_CONSTEXPR Rgb(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgb(const Rgb& from);
  Rgb(Rgb&& from) noexcept
    : Rgb() {
    *this = ::std::move(from);
  }

  inline Rgb& operator=(const Rgb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgb& operator=(Rgb&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgb& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgb* internal_default_instance() {
    return reinterpret_cast<const Rgb*>(
               &_Rgb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Rgb& a, Rgb& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgb* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgb* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgb>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgb& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgb& from) {
    Rgb::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgb* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Rgb";
  }
  protected:
  explicit Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 2;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Rgb)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t red_;
    uint32_t green_;
    uint32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgba final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  ~Rgba() override;
  explicit PROTOBUF_CONSTEXPR Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rgba& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rgba& from) {
    Rgba::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kOpacityFieldNumber = 4,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  uint32_t red() const;
  void set_red(uint32_t value);
  private:
  uint32_t _internal_red() const;
  void _internal_set_red(uint32_t value);
  public:

  // uint32 green = 2;
  void clear_green();
  uint32_t green() const;
  void set_green(uint32_t value);
  private:
  uint32_t _internal_green() const;
  void _internal_set_green(uint32_t value);
  public:

  // double opacity = 4;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  uint32_t blue() const;
  void set_blue(uint32_t value);
  private:
  uint32_t _internal_blue() const;
  void _internal_set_blue(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t red_;
    uint32_t green_;
    double opacity_;
    uint32_t blue_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Color final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  ~Color() override;
  explicit PROTOBUF_CONSTEXPR Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Color& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Color& from) {
    Color::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollortxtFieldNumber = 1,
    kRgbFieldNumber = 2,
    kRgbaFieldNumber = 3,
  };
  // .transport_catalogue_serialize.Collortxt collortxt = 1;
  bool has_collortxt() const;
  private:
  bool _internal_has_collortxt() const;
  public:
  void clear_collortxt();
  const ::transport_catalogue_serialize::Collortxt& collortxt() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Collortxt* release_collortxt();
  ::transport_catalogue_serialize::Collortxt* mutable_collortxt();
  void set_allocated_collortxt(::transport_catalogue_serialize::Collortxt* collortxt);
  private:
  const ::transport_catalogue_serialize::Collortxt& _internal_collortxt() const;
  ::transport_catalogue_serialize::Collortxt* _internal_mutable_collortxt();
  public:
  void unsafe_arena_set_allocated_collortxt(
      ::transport_catalogue_serialize::Collortxt* collortxt);
  ::transport_catalogue_serialize::Collortxt* unsafe_arena_release_collortxt();

  // .transport_catalogue_serialize.Rgb rgb = 2;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::transport_catalogue_serialize::Rgb& rgb() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Rgb* release_rgb();
  ::transport_catalogue_serialize::Rgb* mutable_rgb();
  void set_allocated_rgb(::transport_catalogue_serialize::Rgb* rgb);
  private:
  const ::transport_catalogue_serialize::Rgb& _internal_rgb() const;
  ::transport_catalogue_serialize::Rgb* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::transport_catalogue_serialize::Rgb* rgb);
  ::transport_catalogue_serialize::Rgb* unsafe_arena_release_rgb();

  // .transport_catalogue_serialize.Rgba rgba = 3;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::transport_catalogue_serialize::Rgba& rgba() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Rgba* release_rgba();
  ::transport_catalogue_serialize::Rgba* mutable_rgba();
  void set_allocated_rgba(::transport_catalogue_serialize::Rgba* rgba);
  private:
  const ::transport_catalogue_serialize::Rgba& _internal_rgba() const;
  ::transport_catalogue_serialize::Rgba* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::transport_catalogue_serialize::Rgba* rgba);
  ::transport_catalogue_serialize::Rgba* unsafe_arena_release_rgba();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::transport_catalogue_serialize::Collortxt* collortxt_;
    ::transport_catalogue_serialize::Rgb* rgb_;
    ::transport_catalogue_serialize::Rgba* rgba_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rendersettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Rendersettings) */ {
 public:
  inline Rendersettings() : Rendersettings(nullptr) {}
  ~Rendersettings() override;
  explicit PROTOBUF_CONSTEXPR Rendersettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rendersettings(const Rendersettings& from);
  Rendersettings(Rendersettings&& from) noexcept
    : Rendersettings() {
    *this = ::std::move(from);
  }

  inline Rendersettings& operator=(const Rendersettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rendersettings& operator=(Rendersettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Rendersettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rendersettings* internal_default_instance() {
    return reinterpret_cast<const Rendersettings*>(
               &_Rendersettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Rendersettings& a, Rendersettings& b) {
    a.Swap(&b);
  }
  inline void Swap(Rendersettings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rendersettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Rendersettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Rendersettings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Rendersettings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Rendersettings& from) {
    Rendersettings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rendersettings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Rendersettings";
  }
  protected:
  explicit Rendersettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBusLabelOffsetFieldNumber = 2,
    kColorPaletteFieldNumber = 3,
    kStopLabelOffsetFieldNumber = 8,
    kUnderlayerColorFieldNumber = 10,
    kHeightFieldNumber = 4,
    kBusLabelFontSizeFieldNumber = 1,
    kStopLabelFontSizeFieldNumber = 7,
    kLineWidthFieldNumber = 5,
    kPaddingFieldNumber = 6,
    kStopRadiusFieldNumber = 9,
    kUnderlayerWidthFieldNumber = 11,
    kWidthFieldNumber = 12,
  };
  // repeated double bus_label_offset = 2;
  int bus_label_offset_size() const;
  private:
  int _internal_bus_label_offset_size() const;
  public:
  void clear_bus_label_offset();
  private:
  double _internal_bus_label_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_bus_label_offset() const;
  void _internal_add_bus_label_offset(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_bus_label_offset();
  public:
  double bus_label_offset(int index) const;
  void set_bus_label_offset(int index, double value);
  void add_bus_label_offset(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      bus_label_offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_bus_label_offset();

  // repeated .transport_catalogue_serialize.Color color_palette = 3;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::transport_catalogue_serialize::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >*
      mutable_color_palette();
  private:
  const ::transport_catalogue_serialize::Color& _internal_color_palette(int index) const;
  ::transport_catalogue_serialize::Color* _internal_add_color_palette();
  public:
  const ::transport_catalogue_serialize::Color& color_palette(int index) const;
  ::transport_catalogue_serialize::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >&
      color_palette() const;

  // repeated double stop_label_offset = 8;
  int stop_label_offset_size() const;
  private:
  int _internal_stop_label_offset_size() const;
  public:
  void clear_stop_label_offset();
  private:
  double _internal_stop_label_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_stop_label_offset() const;
  void _internal_add_stop_label_offset(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_stop_label_offset();
  public:
  double stop_label_offset(int index) const;
  void set_stop_label_offset(int index, double value);
  void add_stop_label_offset(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      stop_label_offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_stop_label_offset();

  // .transport_catalogue_serialize.Color underlayer_color = 10;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::transport_catalogue_serialize::Color& underlayer_color() const;
  PROTOBUF_NODISCARD ::transport_catalogue_serialize::Color* release_underlayer_color();
  ::transport_catalogue_serialize::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::transport_catalogue_serialize::Color* underlayer_color);
  private:
  const ::transport_catalogue_serialize::Color& _internal_underlayer_color() const;
  ::transport_catalogue_serialize::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::transport_catalogue_serialize::Color* underlayer_color);
  ::transport_catalogue_serialize::Color* unsafe_arena_release_underlayer_color();

  // double height = 4;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // uint32 bus_label_font_size = 1;
  void clear_bus_label_font_size();
  uint32_t bus_label_font_size() const;
  void set_bus_label_font_size(uint32_t value);
  private:
  uint32_t _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(uint32_t value);
  public:

  // uint32 stop_label_font_size = 7;
  void clear_stop_label_font_size();
  uint32_t stop_label_font_size() const;
  void set_stop_label_font_size(uint32_t value);
  private:
  uint32_t _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(uint32_t value);
  public:

  // double line_width = 5;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double padding = 6;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double stop_radius = 9;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // double width = 12;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Rendersettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > bus_label_offset_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color > color_palette_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > stop_label_offset_;
    ::transport_catalogue_serialize::Color* underlayer_color_;
    double height_;
    uint32_t bus_label_font_size_;
    uint32_t stop_label_font_size_;
    double line_width_;
    double padding_;
    double stop_radius_;
    double underlayer_width_;
    double width_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Table

// map<string, uint32> table_stops = 1;
inline int Table::_internal_table_stops_size() const {
  return _impl_.table_stops_.size();
}
inline int Table::table_stops_size() const {
  return _internal_table_stops_size();
}
inline void Table::clear_table_stops() {
  _impl_.table_stops_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
Table::_internal_table_stops() const {
  return _impl_.table_stops_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
Table::table_stops() const {
  // @@protoc_insertion_point(field_map:transport_catalogue_serialize.Table.table_stops)
  return _internal_table_stops();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
Table::_internal_mutable_table_stops() {
  return _impl_.table_stops_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
Table::mutable_table_stops() {
  // @@protoc_insertion_point(field_mutable_map:transport_catalogue_serialize.Table.table_stops)
  return _internal_mutable_table_stops();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Tableinvert

// map<uint32, string> table_invert_stops = 1;
inline int Tableinvert::_internal_table_invert_stops_size() const {
  return _impl_.table_invert_stops_.size();
}
inline int Tableinvert::table_invert_stops_size() const {
  return _internal_table_invert_stops_size();
}
inline void Tableinvert::clear_table_invert_stops() {
  _impl_.table_invert_stops_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
Tableinvert::_internal_table_invert_stops() const {
  return _impl_.table_invert_stops_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >&
Tableinvert::table_invert_stops() const {
  // @@protoc_insertion_point(field_map:transport_catalogue_serialize.Tableinvert.table_invert_stops)
  return _internal_table_invert_stops();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
Tableinvert::_internal_mutable_table_invert_stops() {
  return _impl_.table_invert_stops_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >*
Tableinvert::mutable_table_invert_stops() {
  // @@protoc_insertion_point(field_mutable_map:transport_catalogue_serialize.Tableinvert.table_invert_stops)
  return _internal_mutable_table_invert_stops();
}

// -------------------------------------------------------------------

// Road

// uint32 to = 1;
inline void Road::clear_to() {
  _impl_.to_ = 0u;
}
inline uint32_t Road::_internal_to() const {
  return _impl_.to_;
}
inline uint32_t Road::to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Road.to)
  return _internal_to();
}
inline void Road::_internal_set_to(uint32_t value) {
  
  _impl_.to_ = value;
}
inline void Road::set_to(uint32_t value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Road.to)
}

// uint32 distance = 2;
inline void Road::clear_distance() {
  _impl_.distance_ = 0u;
}
inline uint32_t Road::_internal_distance() const {
  return _impl_.distance_;
}
inline uint32_t Road::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Road.distance)
  return _internal_distance();
}
inline void Road::_internal_set_distance(uint32_t value) {
  
  _impl_.distance_ = value;
}
inline void Road::set_distance(uint32_t value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Road.distance)
}

// -------------------------------------------------------------------

// Stop

// uint32 name = 1;
inline void Stop::clear_name() {
  _impl_.name_ = 0u;
}
inline uint32_t Stop::_internal_name() const {
  return _impl_.name_;
}
inline uint32_t Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.name)
  return _internal_name();
}
inline void Stop::_internal_set_name(uint32_t value) {
  
  _impl_.name_ = value;
}
inline void Stop::set_name(uint32_t value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Stop.name)
}

// double latitude = 2;
inline void Stop::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double Stop::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double Stop::latitude() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.latitude)
  return _internal_latitude();
}
inline void Stop::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void Stop::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Stop.latitude)
}

// double longitude = 3;
inline void Stop::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double Stop::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double Stop::longitude() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.longitude)
  return _internal_longitude();
}
inline void Stop::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void Stop::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Stop.longitude)
}

// repeated .transport_catalogue_serialize.Road road_distances = 4;
inline int Stop::_internal_road_distances_size() const {
  return _impl_.road_distances_.size();
}
inline int Stop::road_distances_size() const {
  return _internal_road_distances_size();
}
inline void Stop::clear_road_distances() {
  _impl_.road_distances_.Clear();
}
inline ::transport_catalogue_serialize::Road* Stop::mutable_road_distances(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Stop.road_distances)
  return _impl_.road_distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Road >*
Stop::mutable_road_distances() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Stop.road_distances)
  return &_impl_.road_distances_;
}
inline const ::transport_catalogue_serialize::Road& Stop::_internal_road_distances(int index) const {
  return _impl_.road_distances_.Get(index);
}
inline const ::transport_catalogue_serialize::Road& Stop::road_distances(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.road_distances)
  return _internal_road_distances(index);
}
inline ::transport_catalogue_serialize::Road* Stop::_internal_add_road_distances() {
  return _impl_.road_distances_.Add();
}
inline ::transport_catalogue_serialize::Road* Stop::add_road_distances() {
  ::transport_catalogue_serialize::Road* _add = _internal_add_road_distances();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Stop.road_distances)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Road >&
Stop::road_distances() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Stop.road_distances)
  return _impl_.road_distances_;
}

// -------------------------------------------------------------------

// Bus

// string name = 1;
inline void Bus::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Bus::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Bus::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.name)
}
inline std::string* Bus::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Bus.name)
  return _s;
}
inline const std::string& Bus::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Bus::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Bus::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Bus::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Bus.name)
  return _impl_.name_.Release();
}
inline void Bus::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Bus.name)
}

// bool is_roundtrip = 2;
inline void Bus::clear_is_roundtrip() {
  _impl_.is_roundtrip_ = false;
}
inline bool Bus::_internal_is_roundtrip() const {
  return _impl_.is_roundtrip_;
}
inline bool Bus::is_roundtrip() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.is_roundtrip)
  return _internal_is_roundtrip();
}
inline void Bus::_internal_set_is_roundtrip(bool value) {
  
  _impl_.is_roundtrip_ = value;
}
inline void Bus::set_is_roundtrip(bool value) {
  _internal_set_is_roundtrip(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.is_roundtrip)
}

// repeated .transport_catalogue_serialize.Stop stops = 3;
inline int Bus::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Bus::stops_size() const {
  return _internal_stops_size();
}
inline void Bus::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::transport_catalogue_serialize::Stop* Bus::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Bus.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
Bus::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Bus.stops)
  return &_impl_.stops_;
}
inline const ::transport_catalogue_serialize::Stop& Bus::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::transport_catalogue_serialize::Stop& Bus::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_serialize::Stop* Bus::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::transport_catalogue_serialize::Stop* Bus::add_stops() {
  ::transport_catalogue_serialize::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Bus.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
Bus::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Bus.stops)
  return _impl_.stops_;
}

// -------------------------------------------------------------------

// Stops

// repeated .transport_catalogue_serialize.Stop stops = 1;
inline int Stops::_internal_stops_size() const {
  return _impl_.stops_.size();
}
inline int Stops::stops_size() const {
  return _internal_stops_size();
}
inline void Stops::clear_stops() {
  _impl_.stops_.Clear();
}
inline ::transport_catalogue_serialize::Stop* Stops::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Stops.stops)
  return _impl_.stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
Stops::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Stops.stops)
  return &_impl_.stops_;
}
inline const ::transport_catalogue_serialize::Stop& Stops::_internal_stops(int index) const {
  return _impl_.stops_.Get(index);
}
inline const ::transport_catalogue_serialize::Stop& Stops::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stops.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_serialize::Stop* Stops::_internal_add_stops() {
  return _impl_.stops_.Add();
}
inline ::transport_catalogue_serialize::Stop* Stops::add_stops() {
  ::transport_catalogue_serialize::Stop* _add = _internal_add_stops();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Stops.stops)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
Stops::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Stops.stops)
  return _impl_.stops_;
}

// -------------------------------------------------------------------

// Buses

// repeated .transport_catalogue_serialize.Bus buses = 1;
inline int Buses::_internal_buses_size() const {
  return _impl_.buses_.size();
}
inline int Buses::buses_size() const {
  return _internal_buses_size();
}
inline void Buses::clear_buses() {
  _impl_.buses_.Clear();
}
inline ::transport_catalogue_serialize::Bus* Buses::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Buses.buses)
  return _impl_.buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >*
Buses::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Buses.buses)
  return &_impl_.buses_;
}
inline const ::transport_catalogue_serialize::Bus& Buses::_internal_buses(int index) const {
  return _impl_.buses_.Get(index);
}
inline const ::transport_catalogue_serialize::Bus& Buses::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Buses.buses)
  return _internal_buses(index);
}
inline ::transport_catalogue_serialize::Bus* Buses::_internal_add_buses() {
  return _impl_.buses_.Add();
}
inline ::transport_catalogue_serialize::Bus* Buses::add_buses() {
  ::transport_catalogue_serialize::Bus* _add = _internal_add_buses();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Buses.buses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >&
Buses::buses() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Buses.buses)
  return _impl_.buses_;
}

// -------------------------------------------------------------------

// TransportCatalogue

// .transport_catalogue_serialize.Table table = 1;
inline bool TransportCatalogue::_internal_has_table() const {
  return this != internal_default_instance() && _impl_.table_ != nullptr;
}
inline bool TransportCatalogue::has_table() const {
  return _internal_has_table();
}
inline void TransportCatalogue::clear_table() {
  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
}
inline const ::transport_catalogue_serialize::Table& TransportCatalogue::_internal_table() const {
  const ::transport_catalogue_serialize::Table* p = _impl_.table_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Table&>(
      ::transport_catalogue_serialize::_Table_default_instance_);
}
inline const ::transport_catalogue_serialize::Table& TransportCatalogue::table() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.table)
  return _internal_table();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_table(
    ::transport_catalogue_serialize::Table* table) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.table_);
  }
  _impl_.table_ = table;
  if (table) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.table)
}
inline ::transport_catalogue_serialize::Table* TransportCatalogue::release_table() {
  
  ::transport_catalogue_serialize::Table* temp = _impl_.table_;
  _impl_.table_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Table* TransportCatalogue::unsafe_arena_release_table() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.table)
  
  ::transport_catalogue_serialize::Table* temp = _impl_.table_;
  _impl_.table_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Table* TransportCatalogue::_internal_mutable_table() {
  
  if (_impl_.table_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Table>(GetArenaForAllocation());
    _impl_.table_ = p;
  }
  return _impl_.table_;
}
inline ::transport_catalogue_serialize::Table* TransportCatalogue::mutable_table() {
  ::transport_catalogue_serialize::Table* _msg = _internal_mutable_table();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.table)
  return _msg;
}
inline void TransportCatalogue::set_allocated_table(::transport_catalogue_serialize::Table* table) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.table_;
  }
  if (table) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(table);
    if (message_arena != submessage_arena) {
      table = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.table_ = table;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.table)
}

// .transport_catalogue_serialize.Stops stops = 2;
inline bool TransportCatalogue::_internal_has_stops() const {
  return this != internal_default_instance() && _impl_.stops_ != nullptr;
}
inline bool TransportCatalogue::has_stops() const {
  return _internal_has_stops();
}
inline void TransportCatalogue::clear_stops() {
  if (GetArenaForAllocation() == nullptr && _impl_.stops_ != nullptr) {
    delete _impl_.stops_;
  }
  _impl_.stops_ = nullptr;
}
inline const ::transport_catalogue_serialize::Stops& TransportCatalogue::_internal_stops() const {
  const ::transport_catalogue_serialize::Stops* p = _impl_.stops_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Stops&>(
      ::transport_catalogue_serialize::_Stops_default_instance_);
}
inline const ::transport_catalogue_serialize::Stops& TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.stops)
  return _internal_stops();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_stops(
    ::transport_catalogue_serialize::Stops* stops) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stops_);
  }
  _impl_.stops_ = stops;
  if (stops) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.stops)
}
inline ::transport_catalogue_serialize::Stops* TransportCatalogue::release_stops() {
  
  ::transport_catalogue_serialize::Stops* temp = _impl_.stops_;
  _impl_.stops_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Stops* TransportCatalogue::unsafe_arena_release_stops() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.stops)
  
  ::transport_catalogue_serialize::Stops* temp = _impl_.stops_;
  _impl_.stops_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Stops* TransportCatalogue::_internal_mutable_stops() {
  
  if (_impl_.stops_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Stops>(GetArenaForAllocation());
    _impl_.stops_ = p;
  }
  return _impl_.stops_;
}
inline ::transport_catalogue_serialize::Stops* TransportCatalogue::mutable_stops() {
  ::transport_catalogue_serialize::Stops* _msg = _internal_mutable_stops();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.stops)
  return _msg;
}
inline void TransportCatalogue::set_allocated_stops(::transport_catalogue_serialize::Stops* stops) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.stops_;
  }
  if (stops) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stops);
    if (message_arena != submessage_arena) {
      stops = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stops, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.stops_ = stops;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.stops)
}

// .transport_catalogue_serialize.Buses buses = 3;
inline bool TransportCatalogue::_internal_has_buses() const {
  return this != internal_default_instance() && _impl_.buses_ != nullptr;
}
inline bool TransportCatalogue::has_buses() const {
  return _internal_has_buses();
}
inline void TransportCatalogue::clear_buses() {
  if (GetArenaForAllocation() == nullptr && _impl_.buses_ != nullptr) {
    delete _impl_.buses_;
  }
  _impl_.buses_ = nullptr;
}
inline const ::transport_catalogue_serialize::Buses& TransportCatalogue::_internal_buses() const {
  const ::transport_catalogue_serialize::Buses* p = _impl_.buses_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Buses&>(
      ::transport_catalogue_serialize::_Buses_default_instance_);
}
inline const ::transport_catalogue_serialize::Buses& TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.buses)
  return _internal_buses();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_buses(
    ::transport_catalogue_serialize::Buses* buses) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.buses_);
  }
  _impl_.buses_ = buses;
  if (buses) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.buses)
}
inline ::transport_catalogue_serialize::Buses* TransportCatalogue::release_buses() {
  
  ::transport_catalogue_serialize::Buses* temp = _impl_.buses_;
  _impl_.buses_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Buses* TransportCatalogue::unsafe_arena_release_buses() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.buses)
  
  ::transport_catalogue_serialize::Buses* temp = _impl_.buses_;
  _impl_.buses_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Buses* TransportCatalogue::_internal_mutable_buses() {
  
  if (_impl_.buses_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Buses>(GetArenaForAllocation());
    _impl_.buses_ = p;
  }
  return _impl_.buses_;
}
inline ::transport_catalogue_serialize::Buses* TransportCatalogue::mutable_buses() {
  ::transport_catalogue_serialize::Buses* _msg = _internal_mutable_buses();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.buses)
  return _msg;
}
inline void TransportCatalogue::set_allocated_buses(::transport_catalogue_serialize::Buses* buses) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.buses_;
  }
  if (buses) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(buses);
    if (message_arena != submessage_arena) {
      buses = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, buses, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.buses_ = buses;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.buses)
}

// .transport_catalogue_serialize.Routesettings rs = 4;
inline bool TransportCatalogue::_internal_has_rs() const {
  return this != internal_default_instance() && _impl_.rs_ != nullptr;
}
inline bool TransportCatalogue::has_rs() const {
  return _internal_has_rs();
}
inline void TransportCatalogue::clear_rs() {
  if (GetArenaForAllocation() == nullptr && _impl_.rs_ != nullptr) {
    delete _impl_.rs_;
  }
  _impl_.rs_ = nullptr;
}
inline const ::transport_catalogue_serialize::Routesettings& TransportCatalogue::_internal_rs() const {
  const ::transport_catalogue_serialize::Routesettings* p = _impl_.rs_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Routesettings&>(
      ::transport_catalogue_serialize::_Routesettings_default_instance_);
}
inline const ::transport_catalogue_serialize::Routesettings& TransportCatalogue::rs() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.rs)
  return _internal_rs();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_rs(
    ::transport_catalogue_serialize::Routesettings* rs) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rs_);
  }
  _impl_.rs_ = rs;
  if (rs) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.rs)
}
inline ::transport_catalogue_serialize::Routesettings* TransportCatalogue::release_rs() {
  
  ::transport_catalogue_serialize::Routesettings* temp = _impl_.rs_;
  _impl_.rs_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Routesettings* TransportCatalogue::unsafe_arena_release_rs() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.rs)
  
  ::transport_catalogue_serialize::Routesettings* temp = _impl_.rs_;
  _impl_.rs_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Routesettings* TransportCatalogue::_internal_mutable_rs() {
  
  if (_impl_.rs_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Routesettings>(GetArenaForAllocation());
    _impl_.rs_ = p;
  }
  return _impl_.rs_;
}
inline ::transport_catalogue_serialize::Routesettings* TransportCatalogue::mutable_rs() {
  ::transport_catalogue_serialize::Routesettings* _msg = _internal_mutable_rs();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.rs)
  return _msg;
}
inline void TransportCatalogue::set_allocated_rs(::transport_catalogue_serialize::Routesettings* rs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rs_;
  }
  if (rs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rs);
    if (message_arena != submessage_arena) {
      rs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rs, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rs_ = rs;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.rs)
}

// .transport_catalogue_serialize.Rendersettings rends = 5;
inline bool TransportCatalogue::_internal_has_rends() const {
  return this != internal_default_instance() && _impl_.rends_ != nullptr;
}
inline bool TransportCatalogue::has_rends() const {
  return _internal_has_rends();
}
inline void TransportCatalogue::clear_rends() {
  if (GetArenaForAllocation() == nullptr && _impl_.rends_ != nullptr) {
    delete _impl_.rends_;
  }
  _impl_.rends_ = nullptr;
}
inline const ::transport_catalogue_serialize::Rendersettings& TransportCatalogue::_internal_rends() const {
  const ::transport_catalogue_serialize::Rendersettings* p = _impl_.rends_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Rendersettings&>(
      ::transport_catalogue_serialize::_Rendersettings_default_instance_);
}
inline const ::transport_catalogue_serialize::Rendersettings& TransportCatalogue::rends() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.rends)
  return _internal_rends();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_rends(
    ::transport_catalogue_serialize::Rendersettings* rends) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rends_);
  }
  _impl_.rends_ = rends;
  if (rends) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.rends)
}
inline ::transport_catalogue_serialize::Rendersettings* TransportCatalogue::release_rends() {
  
  ::transport_catalogue_serialize::Rendersettings* temp = _impl_.rends_;
  _impl_.rends_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Rendersettings* TransportCatalogue::unsafe_arena_release_rends() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.rends)
  
  ::transport_catalogue_serialize::Rendersettings* temp = _impl_.rends_;
  _impl_.rends_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Rendersettings* TransportCatalogue::_internal_mutable_rends() {
  
  if (_impl_.rends_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Rendersettings>(GetArenaForAllocation());
    _impl_.rends_ = p;
  }
  return _impl_.rends_;
}
inline ::transport_catalogue_serialize::Rendersettings* TransportCatalogue::mutable_rends() {
  ::transport_catalogue_serialize::Rendersettings* _msg = _internal_mutable_rends();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.rends)
  return _msg;
}
inline void TransportCatalogue::set_allocated_rends(::transport_catalogue_serialize::Rendersettings* rends) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rends_;
  }
  if (rends) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rends);
    if (message_arena != submessage_arena) {
      rends = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rends, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rends_ = rends;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.rends)
}

// -------------------------------------------------------------------

// Routesettings

// double bus_velocity = 1;
inline void Routesettings::clear_bus_velocity() {
  _impl_.bus_velocity_ = 0;
}
inline double Routesettings::_internal_bus_velocity() const {
  return _impl_.bus_velocity_;
}
inline double Routesettings::bus_velocity() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Routesettings.bus_velocity)
  return _internal_bus_velocity();
}
inline void Routesettings::_internal_set_bus_velocity(double value) {
  
  _impl_.bus_velocity_ = value;
}
inline void Routesettings::set_bus_velocity(double value) {
  _internal_set_bus_velocity(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Routesettings.bus_velocity)
}

// double bus_wait_time = 2;
inline void Routesettings::clear_bus_wait_time() {
  _impl_.bus_wait_time_ = 0;
}
inline double Routesettings::_internal_bus_wait_time() const {
  return _impl_.bus_wait_time_;
}
inline double Routesettings::bus_wait_time() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Routesettings.bus_wait_time)
  return _internal_bus_wait_time();
}
inline void Routesettings::_internal_set_bus_wait_time(double value) {
  
  _impl_.bus_wait_time_ = value;
}
inline void Routesettings::set_bus_wait_time(double value) {
  _internal_set_bus_wait_time(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Routesettings.bus_wait_time)
}

// -------------------------------------------------------------------

// Collortxt

// string color = 1;
inline void Collortxt::clear_color() {
  _impl_.color_.ClearToEmpty();
}
inline const std::string& Collortxt::color() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Collortxt.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Collortxt::set_color(ArgT0&& arg0, ArgT... args) {
 
 _impl_.color_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Collortxt.color)
}
inline std::string* Collortxt::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Collortxt.color)
  return _s;
}
inline const std::string& Collortxt::_internal_color() const {
  return _impl_.color_.Get();
}
inline void Collortxt::_internal_set_color(const std::string& value) {
  
  _impl_.color_.Set(value, GetArenaForAllocation());
}
inline std::string* Collortxt::_internal_mutable_color() {
  
  return _impl_.color_.Mutable(GetArenaForAllocation());
}
inline std::string* Collortxt::release_color() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Collortxt.color)
  return _impl_.color_.Release();
}
inline void Collortxt::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  _impl_.color_.SetAllocated(color, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.color_.IsDefault()) {
    _impl_.color_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Collortxt.color)
}

// -------------------------------------------------------------------

// Rgb

// uint32 red = 1;
inline void Rgb::clear_red() {
  _impl_.red_ = 0u;
}
inline uint32_t Rgb::_internal_red() const {
  return _impl_.red_;
}
inline uint32_t Rgb::red() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgb.red)
  return _internal_red();
}
inline void Rgb::_internal_set_red(uint32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgb::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgb.red)
}

// uint32 green = 2;
inline void Rgb::clear_green() {
  _impl_.green_ = 0u;
}
inline uint32_t Rgb::_internal_green() const {
  return _impl_.green_;
}
inline uint32_t Rgb::green() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgb.green)
  return _internal_green();
}
inline void Rgb::_internal_set_green(uint32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgb::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgb.green)
}

// uint32 blue = 3;
inline void Rgb::clear_blue() {
  _impl_.blue_ = 0u;
}
inline uint32_t Rgb::_internal_blue() const {
  return _impl_.blue_;
}
inline uint32_t Rgb::blue() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgb.blue)
  return _internal_blue();
}
inline void Rgb::_internal_set_blue(uint32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgb::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgb.blue)
}

// -------------------------------------------------------------------

// Rgba

// uint32 red = 1;
inline void Rgba::clear_red() {
  _impl_.red_ = 0u;
}
inline uint32_t Rgba::_internal_red() const {
  return _impl_.red_;
}
inline uint32_t Rgba::red() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.red)
  return _internal_red();
}
inline void Rgba::_internal_set_red(uint32_t value) {
  
  _impl_.red_ = value;
}
inline void Rgba::set_red(uint32_t value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.red)
}

// uint32 green = 2;
inline void Rgba::clear_green() {
  _impl_.green_ = 0u;
}
inline uint32_t Rgba::_internal_green() const {
  return _impl_.green_;
}
inline uint32_t Rgba::green() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.green)
  return _internal_green();
}
inline void Rgba::_internal_set_green(uint32_t value) {
  
  _impl_.green_ = value;
}
inline void Rgba::set_green(uint32_t value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.green)
}

// uint32 blue = 3;
inline void Rgba::clear_blue() {
  _impl_.blue_ = 0u;
}
inline uint32_t Rgba::_internal_blue() const {
  return _impl_.blue_;
}
inline uint32_t Rgba::blue() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.blue)
  return _internal_blue();
}
inline void Rgba::_internal_set_blue(uint32_t value) {
  
  _impl_.blue_ = value;
}
inline void Rgba::set_blue(uint32_t value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.blue)
}

// double opacity = 4;
inline void Rgba::clear_opacity() {
  _impl_.opacity_ = 0;
}
inline double Rgba::_internal_opacity() const {
  return _impl_.opacity_;
}
inline double Rgba::opacity() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.opacity)
  return _internal_opacity();
}
inline void Rgba::_internal_set_opacity(double value) {
  
  _impl_.opacity_ = value;
}
inline void Rgba::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.opacity)
}

// -------------------------------------------------------------------

// Color

// .transport_catalogue_serialize.Collortxt collortxt = 1;
inline bool Color::_internal_has_collortxt() const {
  return this != internal_default_instance() && _impl_.collortxt_ != nullptr;
}
inline bool Color::has_collortxt() const {
  return _internal_has_collortxt();
}
inline void Color::clear_collortxt() {
  if (GetArenaForAllocation() == nullptr && _impl_.collortxt_ != nullptr) {
    delete _impl_.collortxt_;
  }
  _impl_.collortxt_ = nullptr;
}
inline const ::transport_catalogue_serialize::Collortxt& Color::_internal_collortxt() const {
  const ::transport_catalogue_serialize::Collortxt* p = _impl_.collortxt_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Collortxt&>(
      ::transport_catalogue_serialize::_Collortxt_default_instance_);
}
inline const ::transport_catalogue_serialize::Collortxt& Color::collortxt() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Color.collortxt)
  return _internal_collortxt();
}
inline void Color::unsafe_arena_set_allocated_collortxt(
    ::transport_catalogue_serialize::Collortxt* collortxt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.collortxt_);
  }
  _impl_.collortxt_ = collortxt;
  if (collortxt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Color.collortxt)
}
inline ::transport_catalogue_serialize::Collortxt* Color::release_collortxt() {
  
  ::transport_catalogue_serialize::Collortxt* temp = _impl_.collortxt_;
  _impl_.collortxt_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Collortxt* Color::unsafe_arena_release_collortxt() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Color.collortxt)
  
  ::transport_catalogue_serialize::Collortxt* temp = _impl_.collortxt_;
  _impl_.collortxt_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Collortxt* Color::_internal_mutable_collortxt() {
  
  if (_impl_.collortxt_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Collortxt>(GetArenaForAllocation());
    _impl_.collortxt_ = p;
  }
  return _impl_.collortxt_;
}
inline ::transport_catalogue_serialize::Collortxt* Color::mutable_collortxt() {
  ::transport_catalogue_serialize::Collortxt* _msg = _internal_mutable_collortxt();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Color.collortxt)
  return _msg;
}
inline void Color::set_allocated_collortxt(::transport_catalogue_serialize::Collortxt* collortxt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.collortxt_;
  }
  if (collortxt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(collortxt);
    if (message_arena != submessage_arena) {
      collortxt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collortxt, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.collortxt_ = collortxt;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Color.collortxt)
}

// .transport_catalogue_serialize.Rgb rgb = 2;
inline bool Color::_internal_has_rgb() const {
  return this != internal_default_instance() && _impl_.rgb_ != nullptr;
}
inline bool Color::has_rgb() const {
  return _internal_has_rgb();
}
inline void Color::clear_rgb() {
  if (GetArenaForAllocation() == nullptr && _impl_.rgb_ != nullptr) {
    delete _impl_.rgb_;
  }
  _impl_.rgb_ = nullptr;
}
inline const ::transport_catalogue_serialize::Rgb& Color::_internal_rgb() const {
  const ::transport_catalogue_serialize::Rgb* p = _impl_.rgb_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Rgb&>(
      ::transport_catalogue_serialize::_Rgb_default_instance_);
}
inline const ::transport_catalogue_serialize::Rgb& Color::rgb() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Color.rgb)
  return _internal_rgb();
}
inline void Color::unsafe_arena_set_allocated_rgb(
    ::transport_catalogue_serialize::Rgb* rgb) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rgb_);
  }
  _impl_.rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Color.rgb)
}
inline ::transport_catalogue_serialize::Rgb* Color::release_rgb() {
  
  ::transport_catalogue_serialize::Rgb* temp = _impl_.rgb_;
  _impl_.rgb_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Rgb* Color::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Color.rgb)
  
  ::transport_catalogue_serialize::Rgb* temp = _impl_.rgb_;
  _impl_.rgb_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Rgb* Color::_internal_mutable_rgb() {
  
  if (_impl_.rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Rgb>(GetArenaForAllocation());
    _impl_.rgb_ = p;
  }
  return _impl_.rgb_;
}
inline ::transport_catalogue_serialize::Rgb* Color::mutable_rgb() {
  ::transport_catalogue_serialize::Rgb* _msg = _internal_mutable_rgb();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Color.rgb)
  return _msg;
}
inline void Color::set_allocated_rgb(::transport_catalogue_serialize::Rgb* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rgb_;
  }
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Color.rgb)
}

// .transport_catalogue_serialize.Rgba rgba = 3;
inline bool Color::_internal_has_rgba() const {
  return this != internal_default_instance() && _impl_.rgba_ != nullptr;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::clear_rgba() {
  if (GetArenaForAllocation() == nullptr && _impl_.rgba_ != nullptr) {
    delete _impl_.rgba_;
  }
  _impl_.rgba_ = nullptr;
}
inline const ::transport_catalogue_serialize::Rgba& Color::_internal_rgba() const {
  const ::transport_catalogue_serialize::Rgba* p = _impl_.rgba_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Rgba&>(
      ::transport_catalogue_serialize::_Rgba_default_instance_);
}
inline const ::transport_catalogue_serialize::Rgba& Color::rgba() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Color.rgba)
  return _internal_rgba();
}
inline void Color::unsafe_arena_set_allocated_rgba(
    ::transport_catalogue_serialize::Rgba* rgba) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rgba_);
  }
  _impl_.rgba_ = rgba;
  if (rgba) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Color.rgba)
}
inline ::transport_catalogue_serialize::Rgba* Color::release_rgba() {
  
  ::transport_catalogue_serialize::Rgba* temp = _impl_.rgba_;
  _impl_.rgba_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Rgba* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Color.rgba)
  
  ::transport_catalogue_serialize::Rgba* temp = _impl_.rgba_;
  _impl_.rgba_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Rgba* Color::_internal_mutable_rgba() {
  
  if (_impl_.rgba_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Rgba>(GetArenaForAllocation());
    _impl_.rgba_ = p;
  }
  return _impl_.rgba_;
}
inline ::transport_catalogue_serialize::Rgba* Color::mutable_rgba() {
  ::transport_catalogue_serialize::Rgba* _msg = _internal_mutable_rgba();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Color.rgba)
  return _msg;
}
inline void Color::set_allocated_rgba(::transport_catalogue_serialize::Rgba* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rgba_;
  }
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.rgba_ = rgba;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Color.rgba)
}

// -------------------------------------------------------------------

// Rendersettings

// uint32 bus_label_font_size = 1;
inline void Rendersettings::clear_bus_label_font_size() {
  _impl_.bus_label_font_size_ = 0u;
}
inline uint32_t Rendersettings::_internal_bus_label_font_size() const {
  return _impl_.bus_label_font_size_;
}
inline uint32_t Rendersettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void Rendersettings::_internal_set_bus_label_font_size(uint32_t value) {
  
  _impl_.bus_label_font_size_ = value;
}
inline void Rendersettings::set_bus_label_font_size(uint32_t value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.bus_label_font_size)
}

// repeated double bus_label_offset = 2;
inline int Rendersettings::_internal_bus_label_offset_size() const {
  return _impl_.bus_label_offset_.size();
}
inline int Rendersettings::bus_label_offset_size() const {
  return _internal_bus_label_offset_size();
}
inline void Rendersettings::clear_bus_label_offset() {
  _impl_.bus_label_offset_.Clear();
}
inline double Rendersettings::_internal_bus_label_offset(int index) const {
  return _impl_.bus_label_offset_.Get(index);
}
inline double Rendersettings::bus_label_offset(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.bus_label_offset)
  return _internal_bus_label_offset(index);
}
inline void Rendersettings::set_bus_label_offset(int index, double value) {
  _impl_.bus_label_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.bus_label_offset)
}
inline void Rendersettings::_internal_add_bus_label_offset(double value) {
  _impl_.bus_label_offset_.Add(value);
}
inline void Rendersettings::add_bus_label_offset(double value) {
  _internal_add_bus_label_offset(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Rendersettings.bus_label_offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Rendersettings::_internal_bus_label_offset() const {
  return _impl_.bus_label_offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Rendersettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Rendersettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Rendersettings::_internal_mutable_bus_label_offset() {
  return &_impl_.bus_label_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Rendersettings::mutable_bus_label_offset() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Rendersettings.bus_label_offset)
  return _internal_mutable_bus_label_offset();
}

// repeated .transport_catalogue_serialize.Color color_palette = 3;
inline int Rendersettings::_internal_color_palette_size() const {
  return _impl_.color_palette_.size();
}
inline int Rendersettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline void Rendersettings::clear_color_palette() {
  _impl_.color_palette_.Clear();
}
inline ::transport_catalogue_serialize::Color* Rendersettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Rendersettings.color_palette)
  return _impl_.color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >*
Rendersettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Rendersettings.color_palette)
  return &_impl_.color_palette_;
}
inline const ::transport_catalogue_serialize::Color& Rendersettings::_internal_color_palette(int index) const {
  return _impl_.color_palette_.Get(index);
}
inline const ::transport_catalogue_serialize::Color& Rendersettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.color_palette)
  return _internal_color_palette(index);
}
inline ::transport_catalogue_serialize::Color* Rendersettings::_internal_add_color_palette() {
  return _impl_.color_palette_.Add();
}
inline ::transport_catalogue_serialize::Color* Rendersettings::add_color_palette() {
  ::transport_catalogue_serialize::Color* _add = _internal_add_color_palette();
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Rendersettings.color_palette)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >&
Rendersettings::color_palette() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Rendersettings.color_palette)
  return _impl_.color_palette_;
}

// double height = 4;
inline void Rendersettings::clear_height() {
  _impl_.height_ = 0;
}
inline double Rendersettings::_internal_height() const {
  return _impl_.height_;
}
inline double Rendersettings::height() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.height)
  return _internal_height();
}
inline void Rendersettings::_internal_set_height(double value) {
  
  _impl_.height_ = value;
}
inline void Rendersettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.height)
}

// double line_width = 5;
inline void Rendersettings::clear_line_width() {
  _impl_.line_width_ = 0;
}
inline double Rendersettings::_internal_line_width() const {
  return _impl_.line_width_;
}
inline double Rendersettings::line_width() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.line_width)
  return _internal_line_width();
}
inline void Rendersettings::_internal_set_line_width(double value) {
  
  _impl_.line_width_ = value;
}
inline void Rendersettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.line_width)
}

// double padding = 6;
inline void Rendersettings::clear_padding() {
  _impl_.padding_ = 0;
}
inline double Rendersettings::_internal_padding() const {
  return _impl_.padding_;
}
inline double Rendersettings::padding() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.padding)
  return _internal_padding();
}
inline void Rendersettings::_internal_set_padding(double value) {
  
  _impl_.padding_ = value;
}
inline void Rendersettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.padding)
}

// uint32 stop_label_font_size = 7;
inline void Rendersettings::clear_stop_label_font_size() {
  _impl_.stop_label_font_size_ = 0u;
}
inline uint32_t Rendersettings::_internal_stop_label_font_size() const {
  return _impl_.stop_label_font_size_;
}
inline uint32_t Rendersettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void Rendersettings::_internal_set_stop_label_font_size(uint32_t value) {
  
  _impl_.stop_label_font_size_ = value;
}
inline void Rendersettings::set_stop_label_font_size(uint32_t value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.stop_label_font_size)
}

// repeated double stop_label_offset = 8;
inline int Rendersettings::_internal_stop_label_offset_size() const {
  return _impl_.stop_label_offset_.size();
}
inline int Rendersettings::stop_label_offset_size() const {
  return _internal_stop_label_offset_size();
}
inline void Rendersettings::clear_stop_label_offset() {
  _impl_.stop_label_offset_.Clear();
}
inline double Rendersettings::_internal_stop_label_offset(int index) const {
  return _impl_.stop_label_offset_.Get(index);
}
inline double Rendersettings::stop_label_offset(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.stop_label_offset)
  return _internal_stop_label_offset(index);
}
inline void Rendersettings::set_stop_label_offset(int index, double value) {
  _impl_.stop_label_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.stop_label_offset)
}
inline void Rendersettings::_internal_add_stop_label_offset(double value) {
  _impl_.stop_label_offset_.Add(value);
}
inline void Rendersettings::add_stop_label_offset(double value) {
  _internal_add_stop_label_offset(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Rendersettings.stop_label_offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Rendersettings::_internal_stop_label_offset() const {
  return _impl_.stop_label_offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
Rendersettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Rendersettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Rendersettings::_internal_mutable_stop_label_offset() {
  return &_impl_.stop_label_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
Rendersettings::mutable_stop_label_offset() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Rendersettings.stop_label_offset)
  return _internal_mutable_stop_label_offset();
}

// double stop_radius = 9;
inline void Rendersettings::clear_stop_radius() {
  _impl_.stop_radius_ = 0;
}
inline double Rendersettings::_internal_stop_radius() const {
  return _impl_.stop_radius_;
}
inline double Rendersettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.stop_radius)
  return _internal_stop_radius();
}
inline void Rendersettings::_internal_set_stop_radius(double value) {
  
  _impl_.stop_radius_ = value;
}
inline void Rendersettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.stop_radius)
}

// .transport_catalogue_serialize.Color underlayer_color = 10;
inline bool Rendersettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && _impl_.underlayer_color_ != nullptr;
}
inline bool Rendersettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void Rendersettings::clear_underlayer_color() {
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
}
inline const ::transport_catalogue_serialize::Color& Rendersettings::_internal_underlayer_color() const {
  const ::transport_catalogue_serialize::Color* p = _impl_.underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Color&>(
      ::transport_catalogue_serialize::_Color_default_instance_);
}
inline const ::transport_catalogue_serialize::Color& Rendersettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void Rendersettings::unsafe_arena_set_allocated_underlayer_color(
    ::transport_catalogue_serialize::Color* underlayer_color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.underlayer_color_);
  }
  _impl_.underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Rendersettings.underlayer_color)
}
inline ::transport_catalogue_serialize::Color* Rendersettings::release_underlayer_color() {
  
  ::transport_catalogue_serialize::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::transport_catalogue_serialize::Color* Rendersettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Rendersettings.underlayer_color)
  
  ::transport_catalogue_serialize::Color* temp = _impl_.underlayer_color_;
  _impl_.underlayer_color_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Color* Rendersettings::_internal_mutable_underlayer_color() {
  
  if (_impl_.underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Color>(GetArenaForAllocation());
    _impl_.underlayer_color_ = p;
  }
  return _impl_.underlayer_color_;
}
inline ::transport_catalogue_serialize::Color* Rendersettings::mutable_underlayer_color() {
  ::transport_catalogue_serialize::Color* _msg = _internal_mutable_underlayer_color();
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Rendersettings.underlayer_color)
  return _msg;
}
inline void Rendersettings::set_allocated_underlayer_color(::transport_catalogue_serialize::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Rendersettings.underlayer_color)
}

// double underlayer_width = 11;
inline void Rendersettings::clear_underlayer_width() {
  _impl_.underlayer_width_ = 0;
}
inline double Rendersettings::_internal_underlayer_width() const {
  return _impl_.underlayer_width_;
}
inline double Rendersettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void Rendersettings::_internal_set_underlayer_width(double value) {
  
  _impl_.underlayer_width_ = value;
}
inline void Rendersettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.underlayer_width)
}

// double width = 12;
inline void Rendersettings::clear_width() {
  _impl_.width_ = 0;
}
inline double Rendersettings::_internal_width() const {
  return _impl_.width_;
}
inline double Rendersettings::width() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rendersettings.width)
  return _internal_width();
}
inline void Rendersettings::_internal_set_width(double value) {
  
  _impl_.width_ = value;
}
inline void Rendersettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rendersettings.width)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
