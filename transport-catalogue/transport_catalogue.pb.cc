// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace transport_catalogue_serialize {
PROTOBUF_CONSTEXPR Table_TableStopsEntry_DoNotUse::Table_TableStopsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Table_TableStopsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Table_TableStopsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Table_TableStopsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Table_TableStopsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Table_TableStopsEntry_DoNotUseDefaultTypeInternal _Table_TableStopsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Table::Table(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_stops_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableDefaultTypeInternal() {}
  union {
    Table _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableDefaultTypeInternal _Table_default_instance_;
PROTOBUF_CONSTEXPR Tableinvert_TableInvertStopsEntry_DoNotUse::Tableinvert_TableInvertStopsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Tableinvert_TableInvertStopsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Tableinvert_TableInvertStopsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Tableinvert_TableInvertStopsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Tableinvert_TableInvertStopsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Tableinvert_TableInvertStopsEntry_DoNotUseDefaultTypeInternal _Tableinvert_TableInvertStopsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Tableinvert::Tableinvert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_invert_stops_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TableinvertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TableinvertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TableinvertDefaultTypeInternal() {}
  union {
    Tableinvert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TableinvertDefaultTypeInternal _Tableinvert_default_instance_;
PROTOBUF_CONSTEXPR Road::Road(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.to_)*/0u
  , /*decltype(_impl_.distance_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoadDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoadDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoadDefaultTypeInternal() {}
  union {
    Road _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoadDefaultTypeInternal _Road_default_instance_;
PROTOBUF_CONSTEXPR Stop::Stop(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.road_distances_)*/{}
  , /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.name_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopDefaultTypeInternal() {}
  union {
    Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopDefaultTypeInternal _Stop_default_instance_;
PROTOBUF_CONSTEXPR Bus::Bus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_roundtrip_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusDefaultTypeInternal() {}
  union {
    Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusDefaultTypeInternal _Bus_default_instance_;
PROTOBUF_CONSTEXPR Stops::Stops(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stops_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopsDefaultTypeInternal() {}
  union {
    Stops _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopsDefaultTypeInternal _Stops_default_instance_;
PROTOBUF_CONSTEXPR Buses::Buses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buses_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BusesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BusesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BusesDefaultTypeInternal() {}
  union {
    Buses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BusesDefaultTypeInternal _Buses_default_instance_;
PROTOBUF_CONSTEXPR TransportCatalogue::TransportCatalogue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_)*/nullptr
  , /*decltype(_impl_.stops_)*/nullptr
  , /*decltype(_impl_.buses_)*/nullptr
  , /*decltype(_impl_.rs_)*/nullptr
  , /*decltype(_impl_.rends_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TransportCatalogueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransportCatalogueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
PROTOBUF_CONSTEXPR Routesettings::Routesettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_velocity_)*/0
  , /*decltype(_impl_.bus_wait_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoutesettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoutesettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoutesettingsDefaultTypeInternal() {}
  union {
    Routesettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoutesettingsDefaultTypeInternal _Routesettings_default_instance_;
PROTOBUF_CONSTEXPR Collortxt::Collortxt(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.color_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CollortxtDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CollortxtDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CollortxtDefaultTypeInternal() {}
  union {
    Collortxt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CollortxtDefaultTypeInternal _Collortxt_default_instance_;
PROTOBUF_CONSTEXPR Rgb::Rgb(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.blue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RgbDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RgbDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RgbDefaultTypeInternal() {}
  union {
    Rgb _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RgbDefaultTypeInternal _Rgb_default_instance_;
PROTOBUF_CONSTEXPR Rgba::Rgba(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.red_)*/0u
  , /*decltype(_impl_.green_)*/0u
  , /*decltype(_impl_.opacity_)*/0
  , /*decltype(_impl_.blue_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RgbaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RgbaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RgbaDefaultTypeInternal() {}
  union {
    Rgba _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RgbaDefaultTypeInternal _Rgba_default_instance_;
PROTOBUF_CONSTEXPR Color::Color(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.collortxt_)*/nullptr
  , /*decltype(_impl_.rgb_)*/nullptr
  , /*decltype(_impl_.rgba_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ColorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorDefaultTypeInternal _Color_default_instance_;
PROTOBUF_CONSTEXPR Rendersettings::Rendersettings(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bus_label_offset_)*/{}
  , /*decltype(_impl_.color_palette_)*/{}
  , /*decltype(_impl_.stop_label_offset_)*/{}
  , /*decltype(_impl_.underlayer_color_)*/nullptr
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.bus_label_font_size_)*/0u
  , /*decltype(_impl_.stop_label_font_size_)*/0u
  , /*decltype(_impl_.line_width_)*/0
  , /*decltype(_impl_.padding_)*/0
  , /*decltype(_impl_.stop_radius_)*/0
  , /*decltype(_impl_.underlayer_width_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RendersettingsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RendersettingsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RendersettingsDefaultTypeInternal() {}
  union {
    Rendersettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RendersettingsDefaultTypeInternal _Rendersettings_default_instance_;
}  // namespace transport_catalogue_serialize
static ::_pb::Metadata file_level_metadata_transport_5fcatalogue_2eproto[16];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const uint32_t TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Table, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Table, _impl_.table_stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Tableinvert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Tableinvert, _impl_.table_invert_stops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Road, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Road, _impl_.to_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Road, _impl_.distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, _impl_.road_distances_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, _impl_.is_roundtrip_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, _impl_.stops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stops, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stops, _impl_.stops_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Buses, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Buses, _impl_.buses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _impl_.table_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _impl_.stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _impl_.buses_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _impl_.rs_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _impl_.rends_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Routesettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Routesettings, _impl_.bus_velocity_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Routesettings, _impl_.bus_wait_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Collortxt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Collortxt, _impl_.color_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgb, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgb, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgb, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgb, _impl_.blue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, _impl_.red_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, _impl_.green_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, _impl_.blue_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, _impl_.opacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, _impl_.collortxt_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, _impl_.rgb_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, _impl_.rgba_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.color_palette_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.line_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.padding_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.stop_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.stop_radius_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rendersettings, _impl_.width_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::transport_catalogue_serialize::Table)},
  { 17, 25, -1, sizeof(::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse)},
  { 27, -1, -1, sizeof(::transport_catalogue_serialize::Tableinvert)},
  { 34, -1, -1, sizeof(::transport_catalogue_serialize::Road)},
  { 42, -1, -1, sizeof(::transport_catalogue_serialize::Stop)},
  { 52, -1, -1, sizeof(::transport_catalogue_serialize::Bus)},
  { 61, -1, -1, sizeof(::transport_catalogue_serialize::Stops)},
  { 68, -1, -1, sizeof(::transport_catalogue_serialize::Buses)},
  { 75, -1, -1, sizeof(::transport_catalogue_serialize::TransportCatalogue)},
  { 86, -1, -1, sizeof(::transport_catalogue_serialize::Routesettings)},
  { 94, -1, -1, sizeof(::transport_catalogue_serialize::Collortxt)},
  { 101, -1, -1, sizeof(::transport_catalogue_serialize::Rgb)},
  { 110, -1, -1, sizeof(::transport_catalogue_serialize::Rgba)},
  { 120, -1, -1, sizeof(::transport_catalogue_serialize::Color)},
  { 129, -1, -1, sizeof(::transport_catalogue_serialize::Rendersettings)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::transport_catalogue_serialize::_Table_TableStopsEntry_DoNotUse_default_instance_._instance,
  &::transport_catalogue_serialize::_Table_default_instance_._instance,
  &::transport_catalogue_serialize::_Tableinvert_TableInvertStopsEntry_DoNotUse_default_instance_._instance,
  &::transport_catalogue_serialize::_Tableinvert_default_instance_._instance,
  &::transport_catalogue_serialize::_Road_default_instance_._instance,
  &::transport_catalogue_serialize::_Stop_default_instance_._instance,
  &::transport_catalogue_serialize::_Bus_default_instance_._instance,
  &::transport_catalogue_serialize::_Stops_default_instance_._instance,
  &::transport_catalogue_serialize::_Buses_default_instance_._instance,
  &::transport_catalogue_serialize::_TransportCatalogue_default_instance_._instance,
  &::transport_catalogue_serialize::_Routesettings_default_instance_._instance,
  &::transport_catalogue_serialize::_Collortxt_default_instance_._instance,
  &::transport_catalogue_serialize::_Rgb_default_instance_._instance,
  &::transport_catalogue_serialize::_Rgba_default_instance_._instance,
  &::transport_catalogue_serialize::_Color_default_instance_._instance,
  &::transport_catalogue_serialize::_Rendersettings_default_instance_._instance,
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\035transport_c"
  "atalogue_serialize\"\205\001\n\005Table\022I\n\013table_st"
  "ops\030\001 \003(\01324.transport_catalogue_serializ"
  "e.Table.TableStopsEntry\0321\n\017TableStopsEnt"
  "ry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\r:\0028\001\"\244\001\n\013T"
  "ableinvert\022\\\n\022table_invert_stops\030\001 \003(\0132@"
  ".transport_catalogue_serialize.Tableinve"
  "rt.TableInvertStopsEntry\0327\n\025TableInvertS"
  "topsEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001(\t:\0028"
  "\001\"$\n\004Road\022\n\n\002to\030\001 \001(\r\022\020\n\010distance\030\002 \001(\r\""
  "v\n\004Stop\022\014\n\004name\030\001 \001(\r\022\020\n\010latitude\030\002 \001(\001\022"
  "\021\n\tlongitude\030\003 \001(\001\022;\n\016road_distances\030\004 \003"
  "(\0132#.transport_catalogue_serialize.Road\""
  "]\n\003Bus\022\014\n\004name\030\001 \001(\t\022\024\n\014is_roundtrip\030\002 \001"
  "(\010\0222\n\005stops\030\003 \003(\0132#.transport_catalogue_"
  "serialize.Stop\";\n\005Stops\0222\n\005stops\030\001 \003(\0132#"
  ".transport_catalogue_serialize.Stop\":\n\005B"
  "uses\0221\n\005buses\030\001 \003(\0132\".transport_catalogu"
  "e_serialize.Bus\"\253\002\n\022TransportCatalogue\0223"
  "\n\005table\030\001 \001(\0132$.transport_catalogue_seri"
  "alize.Table\0223\n\005stops\030\002 \001(\0132$.transport_c"
  "atalogue_serialize.Stops\0223\n\005buses\030\003 \001(\0132"
  "$.transport_catalogue_serialize.Buses\0228\n"
  "\002rs\030\004 \001(\0132,.transport_catalogue_serializ"
  "e.Routesettings\022<\n\005rends\030\005 \001(\0132-.transpo"
  "rt_catalogue_serialize.Rendersettings\"<\n"
  "\rRoutesettings\022\024\n\014bus_velocity\030\001 \001(\001\022\025\n\r"
  "bus_wait_time\030\002 \001(\001\"\032\n\tCollortxt\022\r\n\005colo"
  "r\030\001 \001(\t\"/\n\003Rgb\022\013\n\003red\030\001 \001(\r\022\r\n\005green\030\002 \001"
  "(\r\022\014\n\004blue\030\003 \001(\r\"A\n\004Rgba\022\013\n\003red\030\001 \001(\r\022\r\n"
  "\005green\030\002 \001(\r\022\014\n\004blue\030\003 \001(\r\022\017\n\007opacity\030\004 "
  "\001(\001\"\250\001\n\005Color\022;\n\tcollortxt\030\001 \001(\0132(.trans"
  "port_catalogue_serialize.Collortxt\022/\n\003rg"
  "b\030\002 \001(\0132\".transport_catalogue_serialize."
  "Rgb\0221\n\004rgba\030\003 \001(\0132#.transport_catalogue_"
  "serialize.Rgba\"\360\002\n\016Rendersettings\022\033\n\023bus"
  "_label_font_size\030\001 \001(\r\022\030\n\020bus_label_offs"
  "et\030\002 \003(\001\022;\n\rcolor_palette\030\003 \003(\0132$.transp"
  "ort_catalogue_serialize.Color\022\016\n\006height\030"
  "\004 \001(\001\022\022\n\nline_width\030\005 \001(\001\022\017\n\007padding\030\006 \001"
  "(\001\022\034\n\024stop_label_font_size\030\007 \001(\r\022\031\n\021stop"
  "_label_offset\030\010 \003(\001\022\023\n\013stop_radius\030\t \001(\001"
  "\022>\n\020underlayer_color\030\n \001(\0132$.transport_c"
  "atalogue_serialize.Color\022\030\n\020underlayer_w"
  "idth\030\013 \001(\001\022\r\n\005width\030\014 \001(\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
    false, false, 1793, descriptor_table_protodef_transport_5fcatalogue_2eproto,
    "transport_catalogue.proto",
    &descriptor_table_transport_5fcatalogue_2eproto_once, nullptr, 0, 16,
    schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
    file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto,
    file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_transport_5fcatalogue_2eproto_getter() {
  return &descriptor_table_transport_5fcatalogue_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace transport_catalogue_serialize {

// ===================================================================

Table_TableStopsEntry_DoNotUse::Table_TableStopsEntry_DoNotUse() {}
Table_TableStopsEntry_DoNotUse::Table_TableStopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Table_TableStopsEntry_DoNotUse::MergeFrom(const Table_TableStopsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Table_TableStopsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[0]);
}

// ===================================================================

class Table::_Internal {
 public:
};

Table::Table(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Table::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Table)
}
Table::Table(const Table& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Table* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.table_stops_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.table_stops_.MergeFrom(from._impl_.table_stops_);
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Table)
}

inline void Table::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.table_stops_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Table::~Table() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Table)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Table::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_stops_.Destruct();
  _impl_.table_stops_.~MapField();
}

void Table::ArenaDtor(void* object) {
  Table* _this = reinterpret_cast< Table* >(object);
  _this->_impl_.table_stops_.Destruct();
}
void Table::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Table::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Table)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_stops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Table::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, uint32> table_stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.table_stops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Table::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Table)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, uint32> table_stops = 1;
  if (!this->_internal_table_stops().empty()) {
    using MapType = ::_pb::Map<std::string, uint32_t>;
    using WireHelper = Table_TableStopsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_table_stops();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "transport_catalogue_serialize.Table.TableStopsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Table)
  return target;
}

size_t Table::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Table)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> table_stops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_table_stops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_table_stops().begin();
      it != this->_internal_table_stops().end(); ++it) {
    total_size += Table_TableStopsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Table::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Table::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Table::GetClassData() const { return &_class_data_; }


void Table::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Table*>(&to_msg);
  auto& from = static_cast<const Table&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Table)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_stops_.MergeFrom(from._impl_.table_stops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Table::CopyFrom(const Table& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Table)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Table::IsInitialized() const {
  return true;
}

void Table::InternalSwap(Table* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_stops_.InternalSwap(&other->_impl_.table_stops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Table::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[1]);
}

// ===================================================================

Tableinvert_TableInvertStopsEntry_DoNotUse::Tableinvert_TableInvertStopsEntry_DoNotUse() {}
Tableinvert_TableInvertStopsEntry_DoNotUse::Tableinvert_TableInvertStopsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Tableinvert_TableInvertStopsEntry_DoNotUse::MergeFrom(const Tableinvert_TableInvertStopsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Tableinvert_TableInvertStopsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[2]);
}

// ===================================================================

class Tableinvert::_Internal {
 public:
};

Tableinvert::Tableinvert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Tableinvert::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Tableinvert)
}
Tableinvert::Tableinvert(const Tableinvert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Tableinvert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.table_invert_stops_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.table_invert_stops_.MergeFrom(from._impl_.table_invert_stops_);
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Tableinvert)
}

inline void Tableinvert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.table_invert_stops_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Tableinvert::~Tableinvert() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Tableinvert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Tableinvert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_invert_stops_.Destruct();
  _impl_.table_invert_stops_.~MapField();
}

void Tableinvert::ArenaDtor(void* object) {
  Tableinvert* _this = reinterpret_cast< Tableinvert* >(object);
  _this->_impl_.table_invert_stops_.Destruct();
}
void Tableinvert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Tableinvert::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Tableinvert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_invert_stops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Tableinvert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, string> table_invert_stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.table_invert_stops_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Tableinvert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Tableinvert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, string> table_invert_stops = 1;
  if (!this->_internal_table_invert_stops().empty()) {
    using MapType = ::_pb::Map<uint32_t, std::string>;
    using WireHelper = Tableinvert_TableInvertStopsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_table_invert_stops();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "transport_catalogue_serialize.Tableinvert.TableInvertStopsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Tableinvert)
  return target;
}

size_t Tableinvert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Tableinvert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, string> table_invert_stops = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_table_invert_stops_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, std::string >::const_iterator
      it = this->_internal_table_invert_stops().begin();
      it != this->_internal_table_invert_stops().end(); ++it) {
    total_size += Tableinvert_TableInvertStopsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Tableinvert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Tableinvert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Tableinvert::GetClassData() const { return &_class_data_; }


void Tableinvert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Tableinvert*>(&to_msg);
  auto& from = static_cast<const Tableinvert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Tableinvert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_invert_stops_.MergeFrom(from._impl_.table_invert_stops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Tableinvert::CopyFrom(const Tableinvert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Tableinvert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tableinvert::IsInitialized() const {
  return true;
}

void Tableinvert::InternalSwap(Tableinvert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_invert_stops_.InternalSwap(&other->_impl_.table_invert_stops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Tableinvert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[3]);
}

// ===================================================================

class Road::_Internal {
 public:
};

Road::Road(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Road)
}
Road::Road(const Road& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Road* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){}
    , decltype(_impl_.distance_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.to_, &from._impl_.to_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.distance_) -
    reinterpret_cast<char*>(&_impl_.to_)) + sizeof(_impl_.distance_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Road)
}

inline void Road::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.to_){0u}
    , decltype(_impl_.distance_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Road::~Road() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Road)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Road::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Road::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Road::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Road)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.to_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.distance_) -
      reinterpret_cast<char*>(&_impl_.to_)) + sizeof(_impl_.distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Road::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 distance = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Road::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Road)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 to = 1;
  if (this->_internal_to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_to(), target);
  }

  // uint32 distance = 2;
  if (this->_internal_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Road)
  return target;
}

size_t Road::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Road)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 to = 1;
  if (this->_internal_to() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_to());
  }

  // uint32 distance = 2;
  if (this->_internal_distance() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_distance());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Road::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Road::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Road::GetClassData() const { return &_class_data_; }


void Road::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Road*>(&to_msg);
  auto& from = static_cast<const Road&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Road)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_to() != 0) {
    _this->_internal_set_to(from._internal_to());
  }
  if (from._internal_distance() != 0) {
    _this->_internal_set_distance(from._internal_distance());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Road::CopyFrom(const Road& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Road)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Road::IsInitialized() const {
  return true;
}

void Road::InternalSwap(Road* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Road, _impl_.distance_)
      + sizeof(Road::_impl_.distance_)
      - PROTOBUF_FIELD_OFFSET(Road, _impl_.to_)>(
          reinterpret_cast<char*>(&_impl_.to_),
          reinterpret_cast<char*>(&other->_impl_.to_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Road::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[4]);
}

// ===================================================================

class Stop::_Internal {
 public:
};

Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stop* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.road_distances_){from._impl_.road_distances_}
    , decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.name_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.name_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Stop)
}

inline void Stop::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.road_distances_){arena}
    , decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.name_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Stop)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.road_distances_.~RepeatedPtrField();
}

void Stop::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Stop)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.road_distances_.Clear();
  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.name_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.name_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Road road_distances = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_road_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stop::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Stop)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 name = 1;
  if (this->_internal_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_name(), target);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_latitude(), target);
  }

  // double longitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_longitude(), target);
  }

  // repeated .transport_catalogue_serialize.Road road_distances = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_road_distances_size()); i < n; i++) {
    const auto& repfield = this->_internal_road_distances(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Stop)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Road road_distances = 4;
  total_size += 1UL * this->_internal_road_distances_size();
  for (const auto& msg : this->_impl_.road_distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double latitude = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  // uint32 name = 1;
  if (this->_internal_name() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stop::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stop::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stop::GetClassData() const { return &_class_data_; }


void Stop::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stop*>(&to_msg);
  auto& from = static_cast<const Stop&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Stop)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.road_distances_.MergeFrom(from._impl_.road_distances_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  if (from._internal_name() != 0) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.road_distances_.InternalSwap(&other->_impl_.road_distances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stop, _impl_.name_)
      + sizeof(Stop::_impl_.name_)
      - PROTOBUF_FIELD_OFFSET(Stop, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[5]);
}

// ===================================================================

class Bus::_Internal {
 public:
};

Bus::Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Bus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){from._impl_.stops_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_roundtrip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_roundtrip_ = from._impl_.is_roundtrip_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Bus)
}

inline void Bus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.is_roundtrip_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Bus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void Bus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Bus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.is_roundtrip_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transport_catalogue_serialize.Bus.name"));
        } else
          goto handle_unusual;
        continue;
      // bool is_roundtrip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_roundtrip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Stop stops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Bus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Bus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_serialize.Bus.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // bool is_roundtrip = 2;
  if (this->_internal_is_roundtrip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_roundtrip(), target);
  }

  // repeated .transport_catalogue_serialize.Stop stops = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Bus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Stop stops = 3;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bool is_roundtrip = 2;
  if (this->_internal_is_roundtrip() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Bus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Bus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Bus::GetClassData() const { return &_class_data_; }


void Bus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Bus*>(&to_msg);
  auto& from = static_cast<const Bus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Bus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_is_roundtrip() != 0) {
    _this->_internal_set_is_roundtrip(from._internal_is_roundtrip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.is_roundtrip_, other->_impl_.is_roundtrip_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[6]);
}

// ===================================================================

class Stops::_Internal {
 public:
};

Stops::Stops(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Stops)
}
Stops::Stops(const Stops& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Stops* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){from._impl_.stops_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Stops)
}

inline void Stops::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stops_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Stops::~Stops() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Stops)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Stops::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stops_.~RepeatedPtrField();
}

void Stops::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Stops::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Stops)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stops_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stops::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .transport_catalogue_serialize.Stop stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Stops::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Stops)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Stop stops = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stops_size()); i < n; i++) {
    const auto& repfield = this->_internal_stops(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Stops)
  return target;
}

size_t Stops::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Stops)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Stop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->_impl_.stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Stops::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Stops::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Stops::GetClassData() const { return &_class_data_; }


void Stops::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Stops*>(&to_msg);
  auto& from = static_cast<const Stops&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Stops)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stops_.MergeFrom(from._impl_.stops_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Stops::CopyFrom(const Stops& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Stops)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stops::IsInitialized() const {
  return true;
}

void Stops::InternalSwap(Stops* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stops_.InternalSwap(&other->_impl_.stops_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stops::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[7]);
}

// ===================================================================

class Buses::_Internal {
 public:
};

Buses::Buses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Buses)
}
Buses::Buses(const Buses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Buses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buses_){from._impl_.buses_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Buses)
}

inline void Buses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buses_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Buses::~Buses() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Buses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Buses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buses_.~RepeatedPtrField();
}

void Buses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Buses::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Buses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.buses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Buses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .transport_catalogue_serialize.Bus buses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Buses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Buses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Bus buses = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_buses_size()); i < n; i++) {
    const auto& repfield = this->_internal_buses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Buses)
  return target;
}

size_t Buses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Buses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Bus buses = 1;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->_impl_.buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Buses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Buses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Buses::GetClassData() const { return &_class_data_; }


void Buses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Buses*>(&to_msg);
  auto& from = static_cast<const Buses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Buses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.buses_.MergeFrom(from._impl_.buses_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Buses::CopyFrom(const Buses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Buses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Buses::IsInitialized() const {
  return true;
}

void Buses::InternalSwap(Buses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.buses_.InternalSwap(&other->_impl_.buses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Buses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[8]);
}

// ===================================================================

class TransportCatalogue::_Internal {
 public:
  static const ::transport_catalogue_serialize::Table& table(const TransportCatalogue* msg);
  static const ::transport_catalogue_serialize::Stops& stops(const TransportCatalogue* msg);
  static const ::transport_catalogue_serialize::Buses& buses(const TransportCatalogue* msg);
  static const ::transport_catalogue_serialize::Routesettings& rs(const TransportCatalogue* msg);
  static const ::transport_catalogue_serialize::Rendersettings& rends(const TransportCatalogue* msg);
};

const ::transport_catalogue_serialize::Table&
TransportCatalogue::_Internal::table(const TransportCatalogue* msg) {
  return *msg->_impl_.table_;
}
const ::transport_catalogue_serialize::Stops&
TransportCatalogue::_Internal::stops(const TransportCatalogue* msg) {
  return *msg->_impl_.stops_;
}
const ::transport_catalogue_serialize::Buses&
TransportCatalogue::_Internal::buses(const TransportCatalogue* msg) {
  return *msg->_impl_.buses_;
}
const ::transport_catalogue_serialize::Routesettings&
TransportCatalogue::_Internal::rs(const TransportCatalogue* msg) {
  return *msg->_impl_.rs_;
}
const ::transport_catalogue_serialize::Rendersettings&
TransportCatalogue::_Internal::rends(const TransportCatalogue* msg) {
  return *msg->_impl_.rends_;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TransportCatalogue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){nullptr}
    , decltype(_impl_.stops_){nullptr}
    , decltype(_impl_.buses_){nullptr}
    , decltype(_impl_.rs_){nullptr}
    , decltype(_impl_.rends_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_table()) {
    _this->_impl_.table_ = new ::transport_catalogue_serialize::Table(*from._impl_.table_);
  }
  if (from._internal_has_stops()) {
    _this->_impl_.stops_ = new ::transport_catalogue_serialize::Stops(*from._impl_.stops_);
  }
  if (from._internal_has_buses()) {
    _this->_impl_.buses_ = new ::transport_catalogue_serialize::Buses(*from._impl_.buses_);
  }
  if (from._internal_has_rs()) {
    _this->_impl_.rs_ = new ::transport_catalogue_serialize::Routesettings(*from._impl_.rs_);
  }
  if (from._internal_has_rends()) {
    _this->_impl_.rends_ = new ::transport_catalogue_serialize::Rendersettings(*from._impl_.rends_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.TransportCatalogue)
}

inline void TransportCatalogue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_){nullptr}
    , decltype(_impl_.stops_){nullptr}
    , decltype(_impl_.buses_){nullptr}
    , decltype(_impl_.rs_){nullptr}
    , decltype(_impl_.rends_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.TransportCatalogue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.table_;
  if (this != internal_default_instance()) delete _impl_.stops_;
  if (this != internal_default_instance()) delete _impl_.buses_;
  if (this != internal_default_instance()) delete _impl_.rs_;
  if (this != internal_default_instance()) delete _impl_.rends_;
}

void TransportCatalogue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.table_ != nullptr) {
    delete _impl_.table_;
  }
  _impl_.table_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.stops_ != nullptr) {
    delete _impl_.stops_;
  }
  _impl_.stops_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.buses_ != nullptr) {
    delete _impl_.buses_;
  }
  _impl_.buses_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rs_ != nullptr) {
    delete _impl_.rs_;
  }
  _impl_.rs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rends_ != nullptr) {
    delete _impl_.rends_;
  }
  _impl_.rends_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .transport_catalogue_serialize.Table table = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_table(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Stops stops = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stops(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Buses buses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_buses(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Routesettings rs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_rs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Rendersettings rends = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rends(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransportCatalogue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.TransportCatalogue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_catalogue_serialize.Table table = 1;
  if (this->_internal_has_table()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::table(this),
        _Internal::table(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_serialize.Stops stops = 2;
  if (this->_internal_has_stops()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stops(this),
        _Internal::stops(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_serialize.Buses buses = 3;
  if (this->_internal_has_buses()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::buses(this),
        _Internal::buses(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_serialize.Routesettings rs = 4;
  if (this->_internal_has_rs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::rs(this),
        _Internal::rs(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_serialize.Rendersettings rends = 5;
  if (this->_internal_has_rends()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::rends(this),
        _Internal::rends(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.TransportCatalogue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .transport_catalogue_serialize.Table table = 1;
  if (this->_internal_has_table()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.table_);
  }

  // .transport_catalogue_serialize.Stops stops = 2;
  if (this->_internal_has_stops()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stops_);
  }

  // .transport_catalogue_serialize.Buses buses = 3;
  if (this->_internal_has_buses()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.buses_);
  }

  // .transport_catalogue_serialize.Routesettings rs = 4;
  if (this->_internal_has_rs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rs_);
  }

  // .transport_catalogue_serialize.Rendersettings rends = 5;
  if (this->_internal_has_rends()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rends_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransportCatalogue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TransportCatalogue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransportCatalogue::GetClassData() const { return &_class_data_; }


void TransportCatalogue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TransportCatalogue*>(&to_msg);
  auto& from = static_cast<const TransportCatalogue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_table()) {
    _this->_internal_mutable_table()->::transport_catalogue_serialize::Table::MergeFrom(
        from._internal_table());
  }
  if (from._internal_has_stops()) {
    _this->_internal_mutable_stops()->::transport_catalogue_serialize::Stops::MergeFrom(
        from._internal_stops());
  }
  if (from._internal_has_buses()) {
    _this->_internal_mutable_buses()->::transport_catalogue_serialize::Buses::MergeFrom(
        from._internal_buses());
  }
  if (from._internal_has_rs()) {
    _this->_internal_mutable_rs()->::transport_catalogue_serialize::Routesettings::MergeFrom(
        from._internal_rs());
  }
  if (from._internal_has_rends()) {
    _this->_internal_mutable_rends()->::transport_catalogue_serialize::Rendersettings::MergeFrom(
        from._internal_rends());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, _impl_.rends_)
      + sizeof(TransportCatalogue::_impl_.rends_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, _impl_.table_)>(
          reinterpret_cast<char*>(&_impl_.table_),
          reinterpret_cast<char*>(&other->_impl_.table_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[9]);
}

// ===================================================================

class Routesettings::_Internal {
 public:
};

Routesettings::Routesettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Routesettings)
}
Routesettings::Routesettings(const Routesettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Routesettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_){}
    , decltype(_impl_.bus_wait_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.bus_velocity_, &from._impl_.bus_velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bus_wait_time_) -
    reinterpret_cast<char*>(&_impl_.bus_velocity_)) + sizeof(_impl_.bus_wait_time_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Routesettings)
}

inline void Routesettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_velocity_){0}
    , decltype(_impl_.bus_wait_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Routesettings::~Routesettings() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Routesettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Routesettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Routesettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Routesettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Routesettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.bus_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bus_wait_time_) -
      reinterpret_cast<char*>(&_impl_.bus_velocity_)) + sizeof(_impl_.bus_wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Routesettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double bus_velocity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.bus_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double bus_wait_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.bus_wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Routesettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Routesettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double bus_velocity = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_bus_velocity(), target);
  }

  // double bus_wait_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_bus_wait_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Routesettings)
  return target;
}

size_t Routesettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Routesettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double bus_velocity = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = this->_internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    total_size += 1 + 8;
  }

  // double bus_wait_time = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = this->_internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Routesettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Routesettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Routesettings::GetClassData() const { return &_class_data_; }


void Routesettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Routesettings*>(&to_msg);
  auto& from = static_cast<const Routesettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Routesettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_velocity = from._internal_bus_velocity();
  uint64_t raw_bus_velocity;
  memcpy(&raw_bus_velocity, &tmp_bus_velocity, sizeof(tmp_bus_velocity));
  if (raw_bus_velocity != 0) {
    _this->_internal_set_bus_velocity(from._internal_bus_velocity());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_bus_wait_time = from._internal_bus_wait_time();
  uint64_t raw_bus_wait_time;
  memcpy(&raw_bus_wait_time, &tmp_bus_wait_time, sizeof(tmp_bus_wait_time));
  if (raw_bus_wait_time != 0) {
    _this->_internal_set_bus_wait_time(from._internal_bus_wait_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Routesettings::CopyFrom(const Routesettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Routesettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Routesettings::IsInitialized() const {
  return true;
}

void Routesettings::InternalSwap(Routesettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Routesettings, _impl_.bus_wait_time_)
      + sizeof(Routesettings::_impl_.bus_wait_time_)
      - PROTOBUF_FIELD_OFFSET(Routesettings, _impl_.bus_velocity_)>(
          reinterpret_cast<char*>(&_impl_.bus_velocity_),
          reinterpret_cast<char*>(&other->_impl_.bus_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Routesettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[10]);
}

// ===================================================================

class Collortxt::_Internal {
 public:
};

Collortxt::Collortxt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Collortxt)
}
Collortxt::Collortxt(const Collortxt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Collortxt* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    _this->_impl_.color_.Set(from._internal_color(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Collortxt)
}

inline void Collortxt::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.color_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.color_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.color_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Collortxt::~Collortxt() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Collortxt)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Collortxt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.color_.Destroy();
}

void Collortxt::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Collortxt::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Collortxt)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.color_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Collortxt::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string color = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_color();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "transport_catalogue_serialize.Collortxt.color"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Collortxt::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Collortxt)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string color = 1;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_serialize.Collortxt.color");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_color(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Collortxt)
  return target;
}

size_t Collortxt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Collortxt)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string color = 1;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Collortxt::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Collortxt::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Collortxt::GetClassData() const { return &_class_data_; }


void Collortxt::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Collortxt*>(&to_msg);
  auto& from = static_cast<const Collortxt&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Collortxt)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_color().empty()) {
    _this->_internal_set_color(from._internal_color());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Collortxt::CopyFrom(const Collortxt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Collortxt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collortxt::IsInitialized() const {
  return true;
}

void Collortxt::InternalSwap(Collortxt* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.color_, lhs_arena,
      &other->_impl_.color_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Collortxt::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[11]);
}

// ===================================================================

class Rgb::_Internal {
 public:
};

Rgb::Rgb(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Rgb)
}
Rgb::Rgb(const Rgb& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rgb* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.blue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Rgb)
}

inline void Rgb::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.blue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rgb::~Rgb() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Rgb)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rgb::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rgb::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rgb::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Rgb)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rgb::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rgb::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Rgb)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Rgb)
  return target;
}

size_t Rgb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Rgb)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rgb::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rgb::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rgb::GetClassData() const { return &_class_data_; }


void Rgb::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rgb*>(&to_msg);
  auto& from = static_cast<const Rgb&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Rgb)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  if (from._internal_blue() != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rgb::CopyFrom(const Rgb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Rgb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgb::IsInitialized() const {
  return true;
}

void Rgb::InternalSwap(Rgb* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rgb, _impl_.blue_)
      + sizeof(Rgb::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(Rgb, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rgb::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[12]);
}

// ===================================================================

class Rgba::_Internal {
 public:
};

Rgba::Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Rgba)
}
Rgba::Rgba(const Rgba& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rgba* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){}
    , decltype(_impl_.green_){}
    , decltype(_impl_.opacity_){}
    , decltype(_impl_.blue_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.red_, &from._impl_.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_) -
    reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Rgba)
}

inline void Rgba::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.red_){0u}
    , decltype(_impl_.green_){0u}
    , decltype(_impl_.opacity_){0}
    , decltype(_impl_.blue_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rgba::~Rgba() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Rgba)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rgba::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Rgba::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rgba::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Rgba)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.blue_) -
      reinterpret_cast<char*>(&_impl_.red_)) + sizeof(_impl_.blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rgba::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double opacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rgba::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Rgba)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  // double opacity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Rgba)
  return target;
}

size_t Rgba::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Rgba)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->_internal_red() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_red());
  }

  // uint32 green = 2;
  if (this->_internal_green() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_green());
  }

  // double opacity = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = this->_internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    total_size += 1 + 8;
  }

  // uint32 blue = 3;
  if (this->_internal_blue() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_blue());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rgba::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rgba::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rgba::GetClassData() const { return &_class_data_; }


void Rgba::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rgba*>(&to_msg);
  auto& from = static_cast<const Rgba&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Rgba)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_red() != 0) {
    _this->_internal_set_red(from._internal_red());
  }
  if (from._internal_green() != 0) {
    _this->_internal_set_green(from._internal_green());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_opacity = from._internal_opacity();
  uint64_t raw_opacity;
  memcpy(&raw_opacity, &tmp_opacity, sizeof(tmp_opacity));
  if (raw_opacity != 0) {
    _this->_internal_set_opacity(from._internal_opacity());
  }
  if (from._internal_blue() != 0) {
    _this->_internal_set_blue(from._internal_blue());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rgba::CopyFrom(const Rgba& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Rgba)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgba::IsInitialized() const {
  return true;
}

void Rgba::InternalSwap(Rgba* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rgba, _impl_.blue_)
      + sizeof(Rgba::_impl_.blue_)
      - PROTOBUF_FIELD_OFFSET(Rgba, _impl_.red_)>(
          reinterpret_cast<char*>(&_impl_.red_),
          reinterpret_cast<char*>(&other->_impl_.red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rgba::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[13]);
}

// ===================================================================

class Color::_Internal {
 public:
  static const ::transport_catalogue_serialize::Collortxt& collortxt(const Color* msg);
  static const ::transport_catalogue_serialize::Rgb& rgb(const Color* msg);
  static const ::transport_catalogue_serialize::Rgba& rgba(const Color* msg);
};

const ::transport_catalogue_serialize::Collortxt&
Color::_Internal::collortxt(const Color* msg) {
  return *msg->_impl_.collortxt_;
}
const ::transport_catalogue_serialize::Rgb&
Color::_Internal::rgb(const Color* msg) {
  return *msg->_impl_.rgb_;
}
const ::transport_catalogue_serialize::Rgba&
Color::_Internal::rgba(const Color* msg) {
  return *msg->_impl_.rgba_;
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Color* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.collortxt_){nullptr}
    , decltype(_impl_.rgb_){nullptr}
    , decltype(_impl_.rgba_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_collortxt()) {
    _this->_impl_.collortxt_ = new ::transport_catalogue_serialize::Collortxt(*from._impl_.collortxt_);
  }
  if (from._internal_has_rgb()) {
    _this->_impl_.rgb_ = new ::transport_catalogue_serialize::Rgb(*from._impl_.rgb_);
  }
  if (from._internal_has_rgba()) {
    _this->_impl_.rgba_ = new ::transport_catalogue_serialize::Rgba(*from._impl_.rgba_);
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Color)
}

inline void Color::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.collortxt_){nullptr}
    , decltype(_impl_.rgb_){nullptr}
    , decltype(_impl_.rgba_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Color)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.collortxt_;
  if (this != internal_default_instance()) delete _impl_.rgb_;
  if (this != internal_default_instance()) delete _impl_.rgba_;
}

void Color::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Color)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.collortxt_ != nullptr) {
    delete _impl_.collortxt_;
  }
  _impl_.collortxt_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rgb_ != nullptr) {
    delete _impl_.rgb_;
  }
  _impl_.rgb_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.rgba_ != nullptr) {
    delete _impl_.rgba_;
  }
  _impl_.rgba_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .transport_catalogue_serialize.Collortxt collortxt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collortxt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Rgb rgb = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Rgba rgba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgba(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Color::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Color)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_catalogue_serialize.Collortxt collortxt = 1;
  if (this->_internal_has_collortxt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::collortxt(this),
        _Internal::collortxt(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_serialize.Rgb rgb = 2;
  if (this->_internal_has_rgb()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::rgb(this),
        _Internal::rgb(this).GetCachedSize(), target, stream);
  }

  // .transport_catalogue_serialize.Rgba rgba = 3;
  if (this->_internal_has_rgba()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rgba(this),
        _Internal::rgba(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Color)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .transport_catalogue_serialize.Collortxt collortxt = 1;
  if (this->_internal_has_collortxt()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.collortxt_);
  }

  // .transport_catalogue_serialize.Rgb rgb = 2;
  if (this->_internal_has_rgb()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rgb_);
  }

  // .transport_catalogue_serialize.Rgba rgba = 3;
  if (this->_internal_has_rgba()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.rgba_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Color::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Color::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Color::GetClassData() const { return &_class_data_; }


void Color::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Color*>(&to_msg);
  auto& from = static_cast<const Color&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Color)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_collortxt()) {
    _this->_internal_mutable_collortxt()->::transport_catalogue_serialize::Collortxt::MergeFrom(
        from._internal_collortxt());
  }
  if (from._internal_has_rgb()) {
    _this->_internal_mutable_rgb()->::transport_catalogue_serialize::Rgb::MergeFrom(
        from._internal_rgb());
  }
  if (from._internal_has_rgba()) {
    _this->_internal_mutable_rgba()->::transport_catalogue_serialize::Rgba::MergeFrom(
        from._internal_rgba());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, _impl_.rgba_)
      + sizeof(Color::_impl_.rgba_)
      - PROTOBUF_FIELD_OFFSET(Color, _impl_.collortxt_)>(
          reinterpret_cast<char*>(&_impl_.collortxt_),
          reinterpret_cast<char*>(&other->_impl_.collortxt_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[14]);
}

// ===================================================================

class Rendersettings::_Internal {
 public:
  static const ::transport_catalogue_serialize::Color& underlayer_color(const Rendersettings* msg);
};

const ::transport_catalogue_serialize::Color&
Rendersettings::_Internal::underlayer_color(const Rendersettings* msg) {
  return *msg->_impl_.underlayer_color_;
}
Rendersettings::Rendersettings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Rendersettings)
}
Rendersettings::Rendersettings(const Rendersettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Rendersettings* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_label_offset_){from._impl_.bus_label_offset_}
    , decltype(_impl_.color_palette_){from._impl_.color_palette_}
    , decltype(_impl_.stop_label_offset_){from._impl_.stop_label_offset_}
    , decltype(_impl_.underlayer_color_){nullptr}
    , decltype(_impl_.height_){}
    , decltype(_impl_.bus_label_font_size_){}
    , decltype(_impl_.stop_label_font_size_){}
    , decltype(_impl_.line_width_){}
    , decltype(_impl_.padding_){}
    , decltype(_impl_.stop_radius_){}
    , decltype(_impl_.underlayer_width_){}
    , decltype(_impl_.width_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_underlayer_color()) {
    _this->_impl_.underlayer_color_ = new ::transport_catalogue_serialize::Color(*from._impl_.underlayer_color_);
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Rendersettings)
}

inline void Rendersettings::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bus_label_offset_){arena}
    , decltype(_impl_.color_palette_){arena}
    , decltype(_impl_.stop_label_offset_){arena}
    , decltype(_impl_.underlayer_color_){nullptr}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.bus_label_font_size_){0u}
    , decltype(_impl_.stop_label_font_size_){0u}
    , decltype(_impl_.line_width_){0}
    , decltype(_impl_.padding_){0}
    , decltype(_impl_.stop_radius_){0}
    , decltype(_impl_.underlayer_width_){0}
    , decltype(_impl_.width_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Rendersettings::~Rendersettings() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Rendersettings)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Rendersettings::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bus_label_offset_.~RepeatedField();
  _impl_.color_palette_.~RepeatedPtrField();
  _impl_.stop_label_offset_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.underlayer_color_;
}

void Rendersettings::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Rendersettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Rendersettings)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bus_label_offset_.Clear();
  _impl_.color_palette_.Clear();
  _impl_.stop_label_offset_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.underlayer_color_ != nullptr) {
    delete _impl_.underlayer_color_;
  }
  _impl_.underlayer_color_ = nullptr;
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.width_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rendersettings::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 bus_label_font_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bus_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double bus_label_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bus_label_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_bus_label_offset(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Color color_palette = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // double height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double line_width = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double padding = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 stop_label_font_size = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.stop_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double stop_label_offset = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_stop_label_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 65) {
          _internal_add_stop_label_offset(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double stop_radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _impl_.stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Color underlayer_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double underlayer_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _impl_.underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Rendersettings::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Rendersettings)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 bus_label_font_size = 1;
  if (this->_internal_bus_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_bus_label_font_size(), target);
  }

  // repeated double bus_label_offset = 2;
  if (this->_internal_bus_label_offset_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_bus_label_offset(), target);
  }

  // repeated .transport_catalogue_serialize.Color color_palette = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_color_palette_size()); i < n; i++) {
    const auto& repfield = this->_internal_color_palette(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // double height = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_height(), target);
  }

  // double line_width = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_line_width(), target);
  }

  // double padding = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_padding(), target);
  }

  // uint32 stop_label_font_size = 7;
  if (this->_internal_stop_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_stop_label_font_size(), target);
  }

  // repeated double stop_label_offset = 8;
  if (this->_internal_stop_label_offset_size() > 0) {
    target = stream->WriteFixedPacked(8, _internal_stop_label_offset(), target);
  }

  // double stop_radius = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_stop_radius(), target);
  }

  // .transport_catalogue_serialize.Color underlayer_color = 10;
  if (this->_internal_has_underlayer_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::underlayer_color(this),
        _Internal::underlayer_color(this).GetCachedSize(), target, stream);
  }

  // double underlayer_width = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = this->_internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_underlayer_width(), target);
  }

  // double width = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(12, this->_internal_width(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Rendersettings)
  return target;
}

size_t Rendersettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Rendersettings)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bus_label_offset = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bus_label_offset_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated .transport_catalogue_serialize.Color color_palette = 3;
  total_size += 1UL * this->_internal_color_palette_size();
  for (const auto& msg : this->_impl_.color_palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double stop_label_offset = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_stop_label_offset_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .transport_catalogue_serialize.Color underlayer_color = 10;
  if (this->_internal_has_underlayer_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.underlayer_color_);
  }

  // double height = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = this->_internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 8;
  }

  // uint32 bus_label_font_size = 1;
  if (this->_internal_bus_label_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_bus_label_font_size());
  }

  // uint32 stop_label_font_size = 7;
  if (this->_internal_stop_label_font_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_label_font_size());
  }

  // double line_width = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = this->_internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    total_size += 1 + 8;
  }

  // double padding = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = this->_internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    total_size += 1 + 8;
  }

  // double stop_radius = 9;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = this->_internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    total_size += 1 + 8;
  }

  // double underlayer_width = 11;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = this->_internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    total_size += 1 + 8;
  }

  // double width = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = this->_internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Rendersettings::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Rendersettings::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Rendersettings::GetClassData() const { return &_class_data_; }


void Rendersettings::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Rendersettings*>(&to_msg);
  auto& from = static_cast<const Rendersettings&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Rendersettings)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bus_label_offset_.MergeFrom(from._impl_.bus_label_offset_);
  _this->_impl_.color_palette_.MergeFrom(from._impl_.color_palette_);
  _this->_impl_.stop_label_offset_.MergeFrom(from._impl_.stop_label_offset_);
  if (from._internal_has_underlayer_color()) {
    _this->_internal_mutable_underlayer_color()->::transport_catalogue_serialize::Color::MergeFrom(
        from._internal_underlayer_color());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_height = from._internal_height();
  uint64_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_bus_label_font_size() != 0) {
    _this->_internal_set_bus_label_font_size(from._internal_bus_label_font_size());
  }
  if (from._internal_stop_label_font_size() != 0) {
    _this->_internal_set_stop_label_font_size(from._internal_stop_label_font_size());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_line_width = from._internal_line_width();
  uint64_t raw_line_width;
  memcpy(&raw_line_width, &tmp_line_width, sizeof(tmp_line_width));
  if (raw_line_width != 0) {
    _this->_internal_set_line_width(from._internal_line_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_padding = from._internal_padding();
  uint64_t raw_padding;
  memcpy(&raw_padding, &tmp_padding, sizeof(tmp_padding));
  if (raw_padding != 0) {
    _this->_internal_set_padding(from._internal_padding());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_stop_radius = from._internal_stop_radius();
  uint64_t raw_stop_radius;
  memcpy(&raw_stop_radius, &tmp_stop_radius, sizeof(tmp_stop_radius));
  if (raw_stop_radius != 0) {
    _this->_internal_set_stop_radius(from._internal_stop_radius());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_underlayer_width = from._internal_underlayer_width();
  uint64_t raw_underlayer_width;
  memcpy(&raw_underlayer_width, &tmp_underlayer_width, sizeof(tmp_underlayer_width));
  if (raw_underlayer_width != 0) {
    _this->_internal_set_underlayer_width(from._internal_underlayer_width());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_width = from._internal_width();
  uint64_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Rendersettings::CopyFrom(const Rendersettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Rendersettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rendersettings::IsInitialized() const {
  return true;
}

void Rendersettings::InternalSwap(Rendersettings* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bus_label_offset_.InternalSwap(&other->_impl_.bus_label_offset_);
  _impl_.color_palette_.InternalSwap(&other->_impl_.color_palette_);
  _impl_.stop_label_offset_.InternalSwap(&other->_impl_.stop_label_offset_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rendersettings, _impl_.width_)
      + sizeof(Rendersettings::_impl_.width_)
      - PROTOBUF_FIELD_OFFSET(Rendersettings, _impl_.underlayer_color_)>(
          reinterpret_cast<char*>(&_impl_.underlayer_color_),
          reinterpret_cast<char*>(&other->_impl_.underlayer_color_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rendersettings::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_transport_5fcatalogue_2eproto_getter, &descriptor_table_transport_5fcatalogue_2eproto_once,
      file_level_metadata_transport_5fcatalogue_2eproto[15]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Table_TableStopsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Table*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Table >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Table >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Tableinvert_TableInvertStopsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Tableinvert*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Tableinvert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Tableinvert >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Road*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Road >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Road >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Stop*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Bus*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Stops*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Stops >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Stops >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Buses*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Buses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Buses >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::TransportCatalogue*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::TransportCatalogue >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Routesettings*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Routesettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Routesettings >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Collortxt*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Collortxt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Collortxt >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Rgb*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Rgb >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Rgb >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Rgba*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Rgba >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Rgba >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Color*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Rendersettings*
Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Rendersettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Rendersettings >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
